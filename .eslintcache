[{"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js":"1","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js":"2","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js":"3","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js":"4","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js":"5","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js":"6","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js":"7","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js":"8","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js":"9","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js":"10","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js":"11","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js":"12","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js":"13","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js":"14","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js":"15","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js":"16","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Main.js":"17","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Article.js":"18","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Graph.js":"19","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Menu.js":"20","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Nav_MyProduct.js":"21","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\EventRouter.js":"22","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Error\\NonLogin.js":"23","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\AddProduct.js":"24","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\ViewProduct.js":"25","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\StepRouter.js":"26","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step1.js":"27","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step2.js":"28","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductType.js":"29","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\PasswordChange.js":"30","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\InformaionChange.js":"31","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step3.js":"32","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step4.js":"33","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\HelpRouter.js":"34","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Help\\Help.js":"35","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\AccountOut.js":"36","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\ViewRouter.js":"37","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\StatusCode.js":"38","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\SearchHistory.js":"39","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js":"40","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\UserProduct.js":"41","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProductRouter.js":"42","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\CompareRouter.js":"43","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\AfterProduct.js":"44","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProductRouter.js":"45","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Account.js":"46","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\DateFormat.js":"47","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_Main.js":"48","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_List.js":"49","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\env.js":"50"},{"size":449,"mtime":1629818190594,"results":"51","hashOfConfig":"52"},{"size":4178,"mtime":1629820597073,"results":"53","hashOfConfig":"52"},{"size":557,"mtime":1611802791864,"results":"54","hashOfConfig":"52"},{"size":3887,"mtime":1629818190590,"results":"55","hashOfConfig":"52"},{"size":4236,"mtime":1629818190604,"results":"56","hashOfConfig":"52"},{"size":6507,"mtime":1629818190591,"results":"57","hashOfConfig":"52"},{"size":4699,"mtime":1629818190485,"results":"58","hashOfConfig":"52"},{"size":11255,"mtime":1629818190484,"results":"59","hashOfConfig":"52"},{"size":457,"mtime":1629818190600,"results":"60","hashOfConfig":"52"},{"size":2850,"mtime":1629818190491,"results":"61","hashOfConfig":"52"},{"size":839,"mtime":1629818190603,"results":"62","hashOfConfig":"52"},{"size":567,"mtime":1629818190601,"results":"63","hashOfConfig":"52"},{"size":505,"mtime":1629818190606,"results":"64","hashOfConfig":"52"},{"size":5477,"mtime":1629818190602,"results":"65","hashOfConfig":"52"},{"size":3888,"mtime":1629818190487,"results":"66","hashOfConfig":"52"},{"size":4293,"mtime":1629818190486,"results":"67","hashOfConfig":"52"},{"size":14601,"mtime":1629818190476,"results":"68","hashOfConfig":"52"},{"size":6109,"mtime":1629818190474,"results":"69","hashOfConfig":"52"},{"size":15068,"mtime":1629818190475,"results":"70","hashOfConfig":"52"},{"size":1984,"mtime":1629818190478,"results":"71","hashOfConfig":"52"},{"size":2983,"mtime":1629818190479,"results":"72","hashOfConfig":"52"},{"size":308,"mtime":1629818190598,"results":"73","hashOfConfig":"52"},{"size":580,"mtime":1629818190598,"results":"74","hashOfConfig":"52"},{"size":9520,"mtime":1629818190493,"results":"75","hashOfConfig":"52"},{"size":14699,"mtime":1629818190498,"results":"76","hashOfConfig":"52"},{"size":1785,"mtime":1629818190498,"results":"77","hashOfConfig":"52"},{"size":12457,"mtime":1629818190494,"results":"78","hashOfConfig":"52"},{"size":3441,"mtime":1629818190495,"results":"79","hashOfConfig":"52"},{"size":4911,"mtime":1629818190586,"results":"80","hashOfConfig":"52"},{"size":7357,"mtime":1629818190490,"results":"81","hashOfConfig":"52"},{"size":9375,"mtime":1629818190489,"results":"82","hashOfConfig":"52"},{"size":7687,"mtime":1629818190496,"results":"83","hashOfConfig":"52"},{"size":10423,"mtime":1629818190497,"results":"84","hashOfConfig":"52"},{"size":301,"mtime":1629818190599,"results":"85","hashOfConfig":"52"},{"size":2409,"mtime":1629818190482,"results":"86","hashOfConfig":"52"},{"size":5407,"mtime":1629818190488,"results":"87","hashOfConfig":"52"},{"size":4197,"mtime":1629818190606,"results":"88","hashOfConfig":"52"},{"size":208,"mtime":1629818190590,"results":"89","hashOfConfig":"52"},{"size":2265,"mtime":1629818190587,"results":"90","hashOfConfig":"52"},{"size":4309,"mtime":1629818190585,"results":"91","hashOfConfig":"52"},{"size":1342,"mtime":1629818190592,"results":"92","hashOfConfig":"52"},{"size":723,"mtime":1629818190605,"results":"93","hashOfConfig":"52"},{"size":5269,"mtime":1629818190596,"results":"94","hashOfConfig":"52"},{"size":2241,"mtime":1629818190583,"results":"95","hashOfConfig":"52"},{"size":5866,"mtime":1629818190595,"results":"96","hashOfConfig":"52"},{"size":4148,"mtime":1629818190582,"results":"97","hashOfConfig":"52"},{"size":1307,"mtime":1629818190584,"results":"98","hashOfConfig":"52"},{"size":6174,"mtime":1629818190481,"results":"99","hashOfConfig":"52"},{"size":1093,"mtime":1629818190480,"results":"100","hashOfConfig":"52"},{"size":0,"mtime":1629820083354,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"fdgu1h",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"104"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"104"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"104"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"104"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"104"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"104"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"104"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"104"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"104"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"104"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js",[],["222","223"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js",["224"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js",[],["225","226"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js",["227","228"],"import { useEffect } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport SizelityURL from '../contents/js/URL';\r\n\r\nconst Test = ({history}) => {\r\n    const sampleCase = [\r\n        \"https://www.byslim.com/product/%EB%8B%B9%EC%9D%BC%EB%B0%9C%EC%86%A1-%EC%BD%94%EB%94%94%EB%A7%8C%EB%8A%A5-%EA%B8%B4%ED%8C%94%ED%8B%B0mu/19486/category/1/display/6/\",\r\n        \"https://byslim.com/product/%EC%BD%94%ED%8C%85-%ED%97%A4%EB%B9%84-%ED%8A%B8%EB%9F%AC%EC%BB%A4%EC%88%8F%EC%9E%AC%ED%82%B7ot/23644/category/683/display/1/\",\r\n        \"https://byslim.com/product/%ED%8A%B8%EC%9C%8C%EC%8A%A4%ED%8A%B8%EB%A6%BF-%EC%B9%B4%EA%B3%A0-%EC%A1%B0%EA%B1%B0%EB%B0%B4%EB%94%A9%EB%B0%94%EC%A7%80/23627/category/683/display/1/\",\r\n        \"https://www.hiver.co.kr/products/28508426\", // products\r\n        \"https://www.w3schools.com/cssref/css_selectors.asp\",\r\n        \"https://www.hiver.co.kr/products/28549822\", \r\n        \"https://mr-s.co.kr/product/%EA%B3%A0%ED%85%90-%ED%8A%B8%EB%A0%8C%EC%B9%98-%EB%A1%B1%EC%BD%94%ED%8A%B8/39702/category/1/display/13/\",\r\n        \"https://mr-s.co.kr/product/11-%EB%8D%B0%EC%9D%B4-%EC%99%80%EC%9D%B4%EB%93%9C-%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%8B%9D-%EC%85%8B%EC%97%85/39672/category/1/display/2/\",\r\n        \"https://www.zardins.com/product/detail.html?product_no=4518&cate_no=1&display_group=4\", // product_no\r\n        \"https://www.zardins.com/product/detail.html?product_no=5212&cate_no=1&display_group=3\",\r\n        \"http://superstari.co.kr/shop/shopdetail.html?branduid=142447&xcode=044&mcode=001&scode=&special=3&GfDT=bmp8W10%3D\", // branduid\r\n        \"http://www.okkane.co.kr/shop/shopdetail.html?branduid=132910&xcode=102&mcode=000&scode=&special=1&GfDT=bml0W10%3D\",\r\n        \"http://www.okkane.co.kr/shop/shopdetail.html?branduid=129768&xcode=101&mcode=000&scode=&special=1&GfDT=Zm93UFw%3D\",\r\n        \"https://www.meosidda.com/product/%EB%88%84%EA%B5%AC%EB%82%98-%ED%8E%B8%ED%95%98%EA%B2%8C-%EC%A6%90%EA%B2%A8%EC%9E%85%EB%8A%94-%EB%AC%B4%EC%A7%80%EB%A7%A8%ED%88%AC%EB%A7%A8/30969/category/1/display/2/\", // product\r\n        \"https://www.meosidda.com/product/%EB%8D%B0%EC%9D%BC%EB%A6%AC-%EB%A9%B4%EC%8A%A4%ED%8C%90-%EC%B9%B4%EA%B3%A0-%EC%A1%B0%EA%B1%B0%ED%8C%AC%EC%B8%A0/37335/category/1/display/2/\",\r\n        \"http://lookple.com/product/%EB%A3%A9-%EB%8D%B0%EC%9D%B4%ED%94%84-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98-%EB%9D%BC%EC%9A%B4%EB%93%9C%EB%8B%88%ED%8A%B8/4452/category/1/display/3/\",\r\n        \"http://zoozoom.co.kr/shop/shopdetail.html?branduid=164011&xcode=008&mcode=001&scode=&GfDT=Z253UA%3D%3D\",\r\n        \"https://blog.naver.com/guswjd0407/222250474168\",\r\n        \"https://fn3995.tistory.com/128\",\r\n        \"https://hub.zum.com/daily/42307\",\r\n        \"https://yongmat.tistory.com/244?category=735709\",\r\n        \"https://smartstore.naver.com/cookierun/products/5346983325\",\r\n        \"https://smartstore.naver.com/kdgbook/products/5375407225?NaPm=ct%3Dklgwsn8w%7Cci%3D551c6b90ffff31118e8408efa716e5c254c71479%7Ctr%3Dslsl%7Csn%3D531617%7Chk%3D060e0352d7339f3444dab6d0d84af39f268e016e\",\r\n        \"https://m.blog.naver.com/yoorican/221281164058\",\r\n        \"https://m.blog.naver.com/PostView.nhn?blogId=star76a&logNo=220096989645&proxyReferer=https:%2F%2Fwww.google.com%2F\",\r\n        \"https://sanglae.tistory.com/m/209\",\r\n        \"https://www.loveparis.net/product/new20000%EC%9B%90%ED%95%A0%EC%9D%B8-223%ED%99%94%EB%B6%80%ED%84%B0-%EC%A0%95%EC%83%81%EA%B0%80169000%EC%9B%90%EC%9B%A8%EC%9D%B4%EB%B8%8C-%EB%B2%84%ED%8A%BC-%EB%A0%88%EB%8D%94%EC%9E%90%EC%BC%93/16011/category/1/display/3&cafe_mkt=nms_c02?NaPm=ct%3Dklgww3h4%7Cci%3Dd5d8ff715a1d19ced2a05baddbacda62b6bf0f96%7Ctr%3Dwsp%7Csn%3D19686%7Chk%3D4e2e2db88bb98ca6a327ae7ccaca813e7da6174a\"\r\n    ];\r\n    const [{test},setCookies] = useCookies([]);\r\n    \r\n    useEffect(() => {setCookies(\"test\",{test:\"테스트\"},{path:\"/\"})},[]);\r\n    const cookieTest = () => {\r\n        setCookies(\"test\",{test:\"5678\"},{path:\"/\"});\r\n    }\r\n    const url = new SizelityURL();\r\n    for(const element of sampleCase) {\r\n        console.log(url.get(element));\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={() => history.goBack()}>뒤로가기</button>\r\n            <button onClick={() => cookieTest()}>Cookie Test</button>\r\n        </>\r\n    )\r\n}\r\nexport default Test;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js",["229"],"import axios from 'axios';\r\nimport { useContext, useEffect, useRef } from 'react';\r\n\r\n// CSS\r\nimport '../../contents/css/Login/Join.css';\r\n\r\n// Context\r\nimport {ServerContext} from '../../App';\r\n\r\n\r\nconst Join = ({history}) => {\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n\r\n    // Ref\r\n    const resultWrapper = useRef(null); // \"환영합니다.\"\r\n    const alertWrapper = useRef(null);  // 상단 알림\r\n\r\n    const welcomeRef = useRef(null);\r\n    const rePwd = useRef(null);\r\n    const joinData = useRef({\r\n        uid : \"\",\r\n        upwd : \"\",\r\n        name : \"\",\r\n        gender : \"\",\r\n        terms : {\r\n            service : false,\r\n            privacy : false\r\n        },\r\n        alert : false\r\n    })\r\n\r\n\r\n    let gender = null;\r\n\r\n    const event = {\r\n        submitEvent : async function(data) {\r\n            console.log(data);\r\n            if(!this.checkJoinRule(data)) return false;\r\n            // SUBMIT\r\n            resultWrapper.current.classList.add(\"on\");\r\n            await axios({\r\n                method : 'post',\r\n                url : `${server}/account/signup`,\r\n                withCredentials: true,\r\n                data : data,\r\n                timeout : 3000\r\n            }).then(response => {\r\n                switch(response.status) {\r\n                    case 200 : {\r\n                        resultWrapper.current.querySelector('.result-frame').classList.add(\"on\");\r\n                        setTimeout(() => {\r\n                            history.replace('/login');\r\n                        }, 1500);\r\n                        break;\r\n                    }\r\n                    default : {}\r\n                }\r\n                \r\n            }).catch(err => {\r\n                resultWrapper.current.classList.remove(\"on\");\r\n                switch(err?.response?.status) {\r\n                    case 400 : {\r\n                        event.alertToggle(true, \"시스템 오류가 발생하였습니다.\\n 잠시뒤 다시 시도해주세요.\");\r\n                        break;\r\n                    }\r\n                    case 419 : {\r\n                        event.alertToggle(true, \"이미 가입된 이메일 입니다.\");\r\n                        break;\r\n                    }\r\n                    case 500 : {\r\n                        event.alertToggle(true, \"시스템 오류가 발생하였습니다.\\n 잠시뒤 다시 시도해주세요.\");\r\n                        break;\r\n                    }\r\n                    default : {\r\n                        event.alertToggle(true, \"인터넷 연결을 확인해주세요.\");\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        }, // submitEvent()\r\n        genderChange : () => {\r\n            if(gender) {\r\n                for(const element of gender) {\r\n                    if(element.checked) {\r\n                        element.parentElement.classList.add(\"on\");\r\n                    } else {\r\n                        element.parentElement.classList.remove(\"on\");\r\n                    }\r\n                }\r\n            }\r\n        }, // genderChange\r\n\r\n        privacyEvent : (e) => {\r\n            const target = e.target;\r\n            if(target.checked) target.parentElement.classList.add(\"on\");\r\n            else target.parentElement.classList.remove(\"on\");\r\n        }, // Privacy Event\r\n\r\n        alertToggle : function(force, msg) {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contain('on');\r\n            if(msg) alertWrapper.current.querySelector(\"p\").innerHTML = msg;\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        }, // alertToggle\r\n        checkJoinRule : function({uid, upwd, name, gender, terms}) {\r\n            // Check\r\n            const isEmail = ((value) => {\r\n                return (/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n            })(uid);\r\n            if(!isEmail) {\r\n                this.alertToggle(true, \"이메일 형식을 확인해주세요.\");\r\n                return false;\r\n            }\r\n    \r\n            const isPwd = ((value) => {\r\n                return (/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(value);\r\n            })(upwd);\r\n            if(!isPwd) {\r\n                this.alertToggle(true, \"비밀번호 형식을 확인해주세요.\");\r\n                return false;\r\n            }\r\n            const isRePwd = (upwd === rePwd.current.value);\r\n            if(!isRePwd) {\r\n                this.alertToggle(true, \"비밀번호가 서로 일치하지 않습니다.\");\r\n                return false;\r\n            }\r\n    \r\n            const isName = ((value) => {\r\n                return (value.length > 1 && value.length < 21)\r\n            })(name);\r\n            if(!isName) {\r\n                this.alertToggle(true, \"이름은 1~20자를 입력할 수 있습니다.\");\r\n                return false;\r\n            }\r\n            if(gender !== 'male' && gender !== 'female') {\r\n                this.alertToggle(true, \"성별을 선택해주세요.\")\r\n                return;\r\n            }\r\n            if(!terms.service || !terms.privacy) {\r\n                this.alertToggle(true, \"필수 약관에 동의해주세요.\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }, // checkJoinRule()\r\n    }\r\n    useEffect(() => {\r\n        if(!gender) gender = document.querySelectorAll('input[type=\"radio\"][name=\"gender\"]');\r\n    }, []);\r\n    return (\r\n        <section id=\"View-Join\">\r\n            <div className=\"result-wrapper\" ref={resultWrapper}>\r\n                <div className=\"loader-frame\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n                <div className=\"result-frame\" ref={welcomeRef}>\r\n                    <h1>환영합니다</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\"><p></p></div>\r\n                <div className=\"blank\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <header>\r\n                <div className=\"Login-backFrame\" onClick={() => history.goBack()}>\r\n                    <i className=\"material-icons\">arrow_back</i>\r\n                </div>\r\n                <h2>회원가입</h2>\r\n            </header>\r\n            <article>\r\n                <form>\r\n                    <div className=\"loginInfo-input-wrapper\">\r\n                        <h1>로그인 정보</h1>\r\n                        <div className=\"input-frame\">\r\n                            <h2>이메일</h2>\r\n                            <input type=\"email\" className=\"en\" placeholder=\"이메일\" autoComplete=\"off\" id=\"input-email\" onChange={e => joinData.current.uid = e.target.value}/>\r\n                        </div>\r\n                        <div className=\"input-frame\" style={{marginBottom: \"0\"}}>\r\n                            <h2>비밀번호</h2>\r\n                            <input type=\"password\" placeholder=\"비밀번호\" id=\"input-password\" minLength=\"8\" maxLength=\"25\" onChange={e => joinData.current.upwd = e.target.value}/>\r\n                        </div>\r\n                        <p style={{marginBottom: \"1rem\"}}>영문 대소문자, 숫자, 특수문자 포함 8~20자</p>\r\n                        <div className=\"input-frame\">\r\n                            <h2>비밀번호 확인</h2>\r\n                            <input type=\"password\" placeholder=\"비밀번호 확인\" ref={rePwd} id=\"input-re-password\" minLength=\"8\" maxLength=\"25\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h1>개인정보</h1>\r\n                        <div className=\"input-frame\" style={{marginBottom: \"1rem\"}}>\r\n                            <h2>이름</h2>\r\n                            <input type=\"text\" placeholder=\"이름\" id=\"input-first\" autoComplete=\"off\" onChange={e => joinData.current.name = e.target.value}/>\r\n                        </div>\r\n                        <div className=\"gender\">\r\n                            <label>\r\n                                <p>남자</p>\r\n                                <div className=\"dot\"></div>\r\n                                <input type=\"radio\" name=\"gender\" value=\"male\" onClick={() => event.genderChange()} onChange={() => joinData.current.gender = \"male\"}/>\r\n                            </label>\r\n                            <label>\r\n                                <p>여자</p>\r\n                                <div className=\"dot\"></div>\r\n                                <input type=\"radio\" name=\"gender\" value=\"female\" onClick={() => event.genderChange()} onChange={() => joinData.current.gender = \"female\"}/>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                    <div style={{marginTop: \"1rem\", marginBottom: \"3rem\"}}>\r\n                        <h1>약관</h1>\r\n                        <ul>\r\n                            <li className=\"privacy-frame\">\r\n                                <label>\r\n                                    <p>사이즈리티 서비스 이용약관 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)} onChange={e => joinData.current.terms.service = e.target.checked}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">find_in_page</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-frame\">\r\n                                <label>\r\n                                    <p>개인정보 수집 및 이용동의 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)} onChange={e => joinData.current.terms.privacy = e.target.checked}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">find_in_page</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-frame\">\r\n                                <label>\r\n                                    <p>프로모션 안내 메일 수신동의 (선택)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)} onChange={e => joinData.current.alert = e.target.checked}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">find_in_page</i>\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <button type=\"button\" onClick={() => event.submitEvent(joinData.current)}>\r\n                        <i className=\"material-icons\">check</i>\r\n                    </button>\r\n                </form>\r\n            </article>\r\n        </section>\r\n    );\r\n}\r\nexport default Join;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js",["230"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport ProductSearch from '../../contents/js/ProductSearch';\r\nimport SearchHistory from \"../../contents/js/SearchHistory\";\r\n\r\n// Context\r\nimport { ServerContext } from '../../App';\r\n\r\nconst SearchResult = ({praw, history}) => {\r\n    // State\r\n    const [response, setResponse] = useState(null);\r\n    const [onLoader, setOnLoader] = useState(false);\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n    \r\n    const __fetchSearchData = async (praw) => {\r\n        const productSearch = new ProductSearch(server);\r\n        try {\r\n            setOnLoader(true);\r\n            const __response = await productSearch.search({url: praw});\r\n            console.log(\"결과\", __response);\r\n            setResponse(__response);\r\n            setOnLoader(false);\r\n        } catch(error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    const resultClickEvent = (productData) => {\r\n        const { sname, pname, subtype } = productData.info;\r\n        const { full } = productData.praw;\r\n\r\n        // 최근 본 상품에 저장\r\n        const __SearchHistory = new SearchHistory();\r\n        __SearchHistory.set({sname, pname, subtype, full});\r\n        \r\n        // Compare 로 이동\r\n        history.push({\r\n            pathname: `/compare`,\r\n            search: `?shop=${productData.praw.domain}&no=${productData.praw.code}`,\r\n            state : {productData},\r\n        });\r\n        \r\n    }\r\n    useEffect(() => {\r\n        if(praw !== null) __fetchSearchData(praw);\r\n    },[praw]);\r\n    if(onLoader) {\r\n        return (\r\n            <div className=\"loader\"></div>\r\n        )\r\n    } else {\r\n        if(!response) {\r\n            if(praw) {\r\n                return (\r\n                    <i className=\"material-icons\" style={{fontSize:\"3.0rem\"}}>signal_cellular_connected_no_internet_4_bar</i>\r\n                )\r\n            } else {\r\n                return (\r\n                    <h1 className=\"logo\">Sizelity.</h1>\r\n                )\r\n            }\r\n            \r\n        } else {\r\n            if(response && response.constructor === Object) {\r\n                const { sname, pname, ptype, subtype } = response.info;\r\n                return (\r\n                    <div onClick={() => resultClickEvent(response)} className=\"Search-success\">\r\n                        <p>{sname}</p>\r\n                        <h1>{pname}</h1>\r\n                        <div>\r\n                            <p>{ptype}</p>\r\n                            <b>/</b>\r\n                            <p>{subtype}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            } else {\r\n                switch(response) {\r\n                    case 204 : {\r\n                        return (\r\n                            <div className=\"Search-none\">\r\n                                <i className=\"material-icons\">mood_bad</i>\r\n                                <p>상품정보가 없어요.</p>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    case 403 : {\r\n                        return (\r\n                            <div className=\"Search-none\">\r\n                                <i className=\"material-icons\">mood_bad</i>\r\n                                <p>잘못된 주소입니다.</p>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    case 500 :\r\n                    default : {\r\n                        return (\r\n                            <>\r\n                                <i className=\"material-icons\">report_problem</i>\r\n                                <p>검색중에 오류가 발생했습니다.</p>\r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default React.memo(SearchResult);","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Main.js",["231","232"],"import {useContext, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport AfterProduct from '../../contents/js/AfterProduct';\r\n\r\n\r\n// CSS\r\nimport '../../contents/css/Compare/Compare_Main.css';\r\n\r\n// Component\r\nimport Compare from './Compare_Article';\r\nimport NavMyProduct from './Compare_Nav_MyProduct';\r\nimport Menu from './Compare_Menu';\r\n\r\n// Context\r\nimport { MediaContext, LoginContext, ServerContext } from '../../App';\r\n\r\n// Sample Product ADs Image\r\nimport Sample1 from '../../contents/image/sample_image1.png';\r\nimport Sample2 from '../../contents/image/sample_image2.png';\r\n\r\n\r\nconst ViewCompare = ({history, productData}) => {\r\n    const [{ sizelity_myRecently }] = useCookies([]);\r\n    // Context \r\n    const media = useContext(MediaContext);\r\n    const {userInfo} = useContext(LoginContext);\r\n    const server = useContext(ServerContext);\r\n\r\n    // Ref\r\n    const menuFrame = useRef(null);\r\n    const favWrapper = useRef(null);\r\n    const afterAlert = useRef(null);\r\n    const nav = useRef(null);\r\n\r\n    // Field\r\n    let isAfterRequest = false;\r\n    let isMyProductRequest = false;\r\n    let activeSize = null;\r\n    \r\n    let afterProductModule = null;\r\n\r\n\r\n    const wrapperToggle = {\r\n        menu : (force, e) => {\r\n            wrapperToggle.__toogle(menuFrame.current, force, e);\r\n        },\r\n        __toogle : (wrapper, force, e) => {\r\n            if(!wrapper) return;\r\n            if(e) e.stopPropagation();\r\n            if(force === undefined) wrapper.classList.toggle(\"active\");\r\n            else wrapper.classList.toggle(\"active\", force);\r\n        },\r\n        favorite : (force, e) => {\r\n            if(!favWrapper.current) return;\r\n            if(e) e.stopPropagation();\r\n            if(force === undefined) {\r\n                favWrapper.current.classList.toggle(\"active\");\r\n                setTimeout(() => {favWrapper.current.querySelector(\"article\").classList.toggle(\"active\");},50);\r\n            } else {\r\n                if(force) {\r\n                    favWrapper.current.classList.add(\"active\");\r\n                    setTimeout(() => {favWrapper.current.querySelector(\"article\").classList.add(\"active\");},50);\r\n                } else {\r\n                    favWrapper.current.querySelector(\"article\").classList.remove(\"active\");\r\n                    favWrapper.current.classList.remove(\"active\");\r\n                }\r\n            }\r\n        },\r\n        navToggle : function(force) {\r\n            if(nav.current) {\r\n                if(force === undefined) force = !(nav.current.classList.contains(\"active\"));\r\n                nav.current.classList.toggle(\"active\", force);\r\n            }\r\n        } // NavToggle\r\n    }\r\n    const alert = {\r\n        // type : error || normal || clear\r\n        alertToggle : (force, msg, type) => {\r\n            console.log(\"Alert\")\r\n            if(!afterAlert.current) return;\r\n            const cl = afterAlert.current.classList;\r\n            if(force === undefined) force = !cl.contains(\"on\");\r\n            if(force === true) {\r\n                if(msg !== undefined) {\r\n                    if(type === \"error\" || type === \"normal\" || type === \"clear\") {\r\n                        const title = afterAlert.current.querySelector(\"p.title\");\r\n                        if(title) {\r\n                            title.innerHTML = msg;\r\n                            title.classList.remove(\"error\", \"normal\", \"clear\");\r\n                            title.classList.add(type);\r\n                        }\r\n                    }\r\n                }\r\n                cl.add(\"on\");\r\n            } else {\r\n                cl.remove(\"on\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // ref={favWrapper} wrapper 에서의  handler object\r\n    const fav = {\r\n        myWardrobe: function() {\r\n            if(isMyProductRequest) {\r\n                // 해당 상품 추가기록 존재\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                return;\r\n            }\r\n            activeSize = document.querySelector(\"input[type='radio'][name='select-size']:checked\");\r\n            if(activeSize) {\r\n                // 사이즈 선택됨\r\n                if(window.confirm(`'${activeSize.value}'로 저장 하시겠습니까?`)) {\r\n                    const saveData = {\r\n                        info : productData.info,\r\n                        praw : productData.praw,\r\n                        size : null\r\n                    }\r\n                    for(const element of productData.size) {\r\n                        if(element.name === activeSize.value) {\r\n                            saveData.size = element;\r\n                            break;\r\n                        }\r\n                    }\r\n                    try {\r\n                        if(saveData.size) {\r\n                            (async () => {\r\n                                const response = await axios({\r\n                                    method: 'post',\r\n                                    url : `${server}/user/product`,\r\n                                    data : saveData,\r\n                                    withCredentials: true,\r\n                                    timeout : 4000\r\n                                }).catch(() => {\r\n                                    return {data : {status : -200}};\r\n                                });;\r\n                                wrapperToggle.favorite(false);\r\n                                if(response.data && response.data.status !== undefined) {\r\n                                    switch(response.data.status) {\r\n                                        case 200 : {\r\n                                            isMyProductRequest = true;\r\n                                            alert.alertToggle(true, \"나의 옷장에 추가하였습니다.\", \"clear\");\r\n                                            break;\r\n                                        }\r\n                                        case 0 : {\r\n                                            isMyProductRequest = true;\r\n                                            alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                                            break;\r\n                                        }\r\n                                        case -1 : {\r\n                                            alert.alertToggle(true, \"로그인 후 이용가능합니다.\", \"error\");\r\n                                            break;\r\n                                        }\r\n                                        default : {\r\n                                            alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");        \r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    // 서버로 부터 넘어오는 데이터의 문제발생 : 서버 확인 요망\r\n                                    alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                                }\r\n                            })();\r\n                        } else {\r\n                            // 사이즈 선택안됨 : 코드 문제.\r\n                            wrapperToggle.favorite(false);\r\n                            alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                        }\r\n                    } catch(error) {\r\n                        console.log(error);\r\n                        wrapperToggle.favorite(false);\r\n                        alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                    }\r\n                    \r\n                }\r\n            } else {\r\n                // 사이즈 선택안됨\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"나의 옷장에 등록하려는 <b>사이즈를 선택</b>해주세요.\", \"error\");\r\n            }\r\n        }\r\n    }\r\n    const after = {\r\n        set : async function(id) {\r\n            if(isAfterRequest) {\r\n                // 해당 페이지에서 한번 요청한적 있음.\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                return;\r\n            }\r\n            if(!userInfo._id) {\r\n                //  로그인 안된 상태\r\n                alert.alertToggle(true, \"로그인 후 이용가능 합니다.\", \"error\");\r\n                return;\r\n            }\r\n\r\n            if(!afterProductModule) afterProductModule = new AfterProduct(server);\r\n            const response = await afterProductModule.set(id);\r\n            wrapperToggle.favorite(false);\r\n            switch(response.type) {\r\n                case 'success' : {\r\n                    isAfterRequest = true;\r\n                    alert.alertToggle(true, \"나중에 볼 상품에 추가하였습니다.\", \"clear\");\r\n                    break;\r\n                }\r\n\r\n                case 'error' :\r\n                default : {\r\n                    alert.alertToggle(true, response?.msg, \"error\");\r\n                    break;\r\n                }\r\n            }\r\n        }, // async after.set(id)\r\n    }\r\n    return (\r\n        <div id=\"View\">\r\n            {\r\n                productData ? (\r\n                    <>\r\n                        <div className=\"alertWrapper\" ref={afterAlert}>\r\n                            <div className=\"alertFrame\">\r\n                                <p className=\"title\">Test Message</p>\r\n                            </div>\r\n                            {\r\n                                media === \"Desktops\" ?\r\n                                <div className=\"alertClose\" onClick={() => alert.alertToggle(false)}></div> :\r\n                                <div className=\"alertClose\" onTouchStart={() => alert.alertToggle(false)}></div>\r\n                            }\r\n                        </div>\r\n                        <nav id=\"Compare-nav\">\r\n                            <div id=\"Compare-top\">\r\n                                <div  id=\"logo\" className=\"nav-element\" >\r\n                                    <Link to=\"/\">Sizelity.</Link>\r\n                                </div>\r\n                                <Link to=\"/search\" className=\"nav-element\" >\r\n                                    <i className=\"material-icons\">search</i>\r\n                                </Link>\r\n                                <div className=\"nav-element\" onClick={() => wrapperToggle.favorite(true)}>\r\n                                    <i className=\"material-icons\">bookmark_add</i>\r\n                                </div>\r\n                                <div className=\"nav-element\" onClick={() => menuFrame.current.classList.add(\"active\")}>\r\n                                    <i className=\"material-icons\">menu</i>\r\n                                </div>\r\n                            </div>\r\n                        </nav>\r\n                        <section id=\"fav-select-wrapper\" ref={favWrapper}>\r\n                            <article>\r\n                                {\r\n                                    userInfo ? (\r\n                                        <>\r\n                                            <h1>\r\n                                                <b>어디</b>에 추가할까요?\r\n                                            </h1>\r\n                                            <div className=\"fav-select-btn\">\r\n                                                <button style={{borderRight:\"1px solid #dbdbdb\"}} onClick={() => fav.myWardrobe()}>\r\n                                                    <i className=\"material-icons\">door_sliding</i>\r\n                                                    <p>나의 옷장</p>\r\n                                                </button>\r\n                                                <button onClick={() => after.set(productData._id)}>\r\n                                                    <i className=\"material-icons\">watch_later</i>\r\n                                                    <p>나중에 볼 상품</p>\r\n                                                </button>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <i className=\"material-icons\">lock</i>\r\n                                            <h1>\r\n                                                <b>로그인</b>이 필요해요.\r\n                                            </h1>\r\n                                            <div className=\"fav-select-login\">\r\n                                                <Link to=\"/login\">로그인</Link>\r\n                                            </div>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </article>\r\n                            {\r\n                                (media === \"Phone\") ?  \r\n                                (<div className=\"_blank\" onTouchStart={() => wrapperToggle.favorite(false)}></div>) :\r\n                                (<div className=\"_blank\" onClick={() => wrapperToggle.favorite(false)}></div>)\r\n                            }\r\n                        </section>\r\n                        <section id=\"Menu\" ref={menuFrame}>\r\n                            <Menu \r\n                                closerEvent={wrapperToggle.menu}/>\r\n                        </section>\r\n                        <div id=\"myProduct-nav-wrapper\" className=\"active\" ref={nav}>\r\n                            <NavMyProduct\r\n                                myProductData={sizelity_myRecently}\r\n                                history={history}\r\n                                nav={nav}\r\n                                navToggle={wrapperToggle.navToggle}/>\r\n                        </div>\r\n                        <Compare\r\n                            productData={productData} \r\n                            myProduct={sizelity_myRecently}\r\n                            navToggle={wrapperToggle.navToggle}/>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"loaderFrame\">\r\n                        <div className=\"loader\"></div>\r\n                    </div>\r\n                )\r\n            }\r\n           </div> \r\n    );\r\n}\r\nexport default ViewCompare;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Article.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Graph.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Menu.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Nav_MyProduct.js",["233","234"],"import React, {useContext, useEffect, useRef} from 'react';\r\nimport Proptype from 'prop-types';\r\nimport Transition from '../../contents/js/TransitionSizeName';\r\n\r\n// CSS\r\nimport '../../contents/css/MyProductNav.css';\r\n\r\n// Context\r\nimport { MediaContext } from '../../App';\r\n\r\n/*\r\n    @param myProductData : 현재 나의 옷 정보가 담긴 Object (in Cookie \"my_recently\")\r\n    @param setMyProductData : 현재 나의 옷 정보가 담긴 Object state 를 변경하는 함수\r\n*/\r\nlet transition = null;\r\nconst NavMyProduct = ({myProductData, history, nav, navToggle}) => {\r\n    // Context\r\n    const media = useContext(MediaContext);\r\n    \r\n    if(!transition) transition = new Transition(\"KOR\");\r\n\r\n    const event = {\r\n        moveCloset : function() {\r\n            if(nav.current.classList.contains(\"active\")) {\r\n                history.push({\r\n                    pathname : \"/closet\",\r\n                    state : {\r\n                        isCompare : true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    } // event\r\n    return (\r\n        <>\r\n            {\r\n                media === \"Phone\" ?\r\n                <div className=\"navCloser\"  onTouchStart={() => navToggle()}></div> : \r\n                <div className=\"navCloser\"  onClick={() => navToggle()}></div> \r\n            }\r\n            <nav className=\"myProductNav\" onClick={() => navToggle(true)}>\r\n            {\r\n                myProductData ? (\r\n                    <>\r\n                        <div className=\"size\">\r\n                            <p>{myProductData.size.name}</p>\r\n                        </div>\r\n                        <div className=\"info\">\r\n                            <p>{myProductData.info.sname ? myProductData.info.sname : null}</p>\r\n                            <h1>{myProductData.info.nick ? myProductData.info.nick : myProductData.info.pname ? myProductData.info.pname : null}</h1>\r\n                            <div>\r\n                                <p>{transition.getCate(myProductData.info.ptype)}</p>\r\n                                <b>/</b>\r\n                                <p>{myProductData.info.subtype ? myProductData.info.subtype : null}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"changeBtn\">\r\n                            <i className='material-icons' onClick={() => event.moveCloset(true)}>swap_horiz</i>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    \r\n                        <button onClick={() => event.moveCloset(false)}>\r\n                            <i className=\"material-icons\">add</i>\r\n                            <p>나의 옷을 골라주세요.</p>\r\n                        </button>\r\n                )\r\n            }\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavMyProduct.proptype = {\r\n    myProductData : Proptype.object,\r\n    history : Proptype.object.isRequired\r\n}\r\n\r\nexport default React.memo(NavMyProduct);","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\EventRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Error\\NonLogin.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\AddProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\ViewProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\StepRouter.js",["235"],"\r\n// CSS\r\nimport '../../contents/css/UserProduct/Step.css';\r\n\r\n// Component \r\nimport Step1 from './Step/Step1';\r\nimport Step2 from './Step/Step2';\r\nimport Step3 from './Step/Step3';\r\nimport Step4 from './Step/Step4';\r\n\r\nconst Step = ({data, setData, step, setStep, alertToggle, save}) => {\r\n    switch(step) {\r\n        case 1 : {\r\n            return (\r\n                <div className=\"step-wrapper step1\">\r\n                    <Step1 \r\n                        data={data}\r\n                        setData={setData}\r\n                        setStep={setStep}\r\n                        alertToggle={alertToggle}/>\r\n                </div>\r\n            )\r\n        }\r\n        case 2 : {\r\n            return (\r\n                <div className=\"step-wrapper step2\">\r\n                    <Step2\r\n                        data={data}\r\n                        setData={setData}\r\n                        setStep={setStep}\r\n                        alertToggle={alertToggle}/>\r\n                </div>\r\n            )\r\n        }\r\n        case 3 : {\r\n            return (\r\n                <div className=\"step-wrapper step3\">\r\n                    <Step3\r\n                        data={data}\r\n                        setData={setData}\r\n                        setStep={setStep}\r\n                        alertToggle={alertToggle}/>\r\n                </div>\r\n            )\r\n        }\r\n        case 4 : {\r\n            return (\r\n                <div className=\"step-wrapper step3 step4\">\r\n                    <Step4\r\n                        data={data}\r\n                        setData={setData}\r\n                        setStep={setStep}\r\n                        alertToggle={alertToggle}\r\n                        save={save}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Step;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step1.js",["236","237"],"import axios from \"axios\";\r\nimport { useContext, useEffect, useRef, useState } from \"react\";\r\nimport URLModule from '../../../contents/js/URL';\r\n\r\n// CSS\r\nimport '../../../contents/css/UserProduct/Step1.css';\r\n\r\n// Context\r\nimport {ServerContext} from '../../../App';\r\n\r\nlet urlModule = null;\r\n//const server = 'http://localhost:3001';\r\n//const server = 'http://3.36.87.114:3001';\r\n//const server = 'http://192.168.11.2:3001';\r\n\r\nconst Step1 = ({data, setData, setStep, alertToggle}) => {\r\n    // state\r\n    const [product, setProduct] = useState(null);\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n\r\n    // ref\r\n    const productInputWrapper = useRef(null);\r\n    const productInput = useRef(null); // product url input frame\r\n    const sizeListFrame = useRef(null);\r\n    const applyBtn = useRef(null);\r\n    const select = useRef({\r\n        option : {\r\n            value : undefined,\r\n            frame : undefined\r\n        },\r\n        size : {\r\n            value : undefined,\r\n            frame : undefined,\r\n            index : undefined\r\n        }\r\n    });\r\n\r\n    console.log(\"검색 결과 : \",product);\r\n    \r\n    \r\n    const event = {\r\n        onSelect : (e) => {\r\n            if(e) e.stopPropagation();\r\n            else return;\r\n            if(select.current.option.frame) {\r\n                select.current.option.frame.classList.remove(\"on\");\r\n            }\r\n            select.current.option.frame = e.target;\r\n            for(let i=0; i < 3; ++i) {\r\n                if(select.current.option.frame.classList.contains(\"selectOption\")) {\r\n                    select.current.option.frame.classList.add(\"on\");\r\n                    break;\r\n                }\r\n                select.current.option.frame = select.current.option.frame.parentElement;\r\n            }\r\n            select.current.option.value = select.current.option.frame.querySelector(\"input[type=hidden]\").value;\r\n            event.applyToggle();\r\n        },\r\n        productSearch : async () => {\r\n            if(!urlModule) urlModule = new URLModule();\r\n            if(productInput.current.value < 10) return; \r\n            let inputURL = productInput.current.value;\r\n            try {\r\n                inputURL = ((inputURL.indexOf(\"http\") === 0) ? inputURL : \"http://\" + inputURL);\r\n                const isURL = ((value) => {\r\n                    return (/^(file|gopher|news|nntp|telnet|https?|ftps?|sftp):\\/\\/([a-z0-9-]+\\.)+[a-z0-9]{2,4}.*$/).test(value);\r\n                })(inputURL);\r\n                if(isURL) {\r\n                    const analyze = urlModule.get(inputURL);\r\n                    if(analyze) {\r\n                        if(product && product.praw && product.praw.code === analyze.code) return; // 중복된 데이터 검색\r\n                        const response = await axios({\r\n                            method: 'get',\r\n                            url: `${server}/product/${analyze.domain}/${analyze.code}`,\r\n                            timeout: 3500\r\n                        }).catch((err) => {\r\n                            alertToggle(true, \"네트워크 오류\");\r\n                            return {data:{status:-200}}\r\n                        });\r\n                        if(response.data._id || response.data.status) setProduct(response.data);\r\n                        else {\r\n                            alertToggle(true, \"잠시 후 다시 시도해주세요.\");\r\n                            setProduct({status:-200});\r\n                        }\r\n                    } else {\r\n                        alertToggle(true, \"검색 할 수 없는 주소입니다.\");    \r\n                    }\r\n                } else {\r\n                    alertToggle(true, \"상품의 주소값이 형식에 맞지 않습니다.\");\r\n                }\r\n            } catch(err) {\r\n                alertToggle(true, \"잠시 후 다시 시도해주세요.\");\r\n            }\r\n        },\r\n        // 검색된 상품의 사이즈 선택\r\n        onSize : function(size, index, e) {\r\n            if(e) e.stopPropagation();\r\n            else return;\r\n            if(select.current.size.value === size) {\r\n                // 같은거 두번쨰 누름 -> 사이즈 선택 취소\r\n                select.current.size.frame.classList.remove(\"on\");\r\n                select.current.size.value = undefined;\r\n            } else {\r\n                let frame = e.target;\r\n                for(let i=0; i<3; ++i) {\r\n                    if(frame.classList.contains(\"size-element\")) break;\r\n                    frame = frame.parentElement;\r\n                }\r\n                if(select.current.size.frame) select.current.size.frame.classList.remove(\"on\");\r\n                else {\r\n                    \r\n                }\r\n                frame.classList.add(\"on\");\r\n                select.current.size.frame = frame;\r\n                select.current.size.value = size;\r\n                select.current.size.index = index;\r\n            }\r\n            event.applyToggle();\r\n        },\r\n        applyToggle : () => {\r\n            if(!applyBtn.current) return;\r\n            const data = select.current;\r\n            const toggle = (() => {\r\n                if(data.option.value === \"false\") {\r\n                    return true;\r\n                } else if (data.option.value === \"true\"){\r\n                    if(data.size.value !== undefined) {\r\n                        return true;\r\n                    } else return false;\r\n                } else {\r\n                    // option.value === undefined\r\n                    return false;\r\n                }\r\n            })();\r\n            applyBtn.current.classList.toggle(\"off\", !toggle);\r\n            return toggle;\r\n        },\r\n        apply : () => {\r\n            if(event.applyToggle()) {\r\n                if(select.current.option.value === \"false\") {\r\n                    // 아니요, 모르겠어요.\r\n                    setData({info:{},size:{}});\r\n                    setStep(2);\r\n                } else if(select.current.option.value === \"true\") {\r\n                    if(select.current.size.value !== undefined) {\r\n                        if(product && product.praw) {\r\n                            const __data = JSON.parse(JSON.stringify(data));\r\n                            __data.praw = product.praw;\r\n                            __data.info = product.info;\r\n                            __data.size = product.size[select.current.size.index];\r\n                            console.log(\"저장 데이터 : \",data);\r\n                            setData(__data);\r\n                            setStep(3);\r\n                        }       \r\n                    } else {\r\n                        // 오류 -> '네, 알고있어요.' 선택 후 사이즈 선택 안하고 다음단계 이벤트 활성화\r\n                    }\r\n                } else {\r\n                    // 둘중 아무것도 선택하지 않고 다음단계 활성화\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(select);\r\n    useEffect(() => {\r\n        const fetch = async () => {\r\n            if(data && data.praw && data.praw.full) await event.productSearch();\r\n        }\r\n        fetch();\r\n    }, []);\r\n    useEffect(() => {\r\n        if(sizeListFrame.current) {\r\n            try {\r\n                if(product.praw.full === data.praw.full) {\r\n                    const frame = sizeListFrame.current.querySelectorAll(`input[type='hidden']`);\r\n                    \r\n                    if(frame) {\r\n                        const size = data.size.name;\r\n                        for(const index in frame) {\r\n                            if(frame[index].value === size) {\r\n                                select.current.size.value = size;\r\n                                select.current.size.frame = frame[index].parentElement;\r\n                                select.current.size.index = index;\r\n\r\n                                frame[index].parentElement.classList.add(\"on\");\r\n\r\n                                select.current.option.value=\"true\";\r\n                                select.current.option.frame = productInputWrapper.current ? productInputWrapper.current : null;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    const frame = sizeListFrame.current.querySelector(`.size-element.on`);\r\n                    console.log(\"ON Frame : \", frame);\r\n                    if(frame) frame.classList.remove(\"on\");\r\n                }\r\n            } catch{}\r\n            \r\n        }\r\n    }, [product]);\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>상품 주소를 아시나요?</h1>\r\n                <p>상품의 인터넷 주소를 복사/붙여넣기</p>\r\n                <p>보다 쉽게 \"나의 상품\"을 채워보세요.</p>\r\n            </header>\r\n            <ul className=\"help-wrapper\">\r\n                <li>\r\n                    <i className=\"material-icons\">help_outline</i>\r\n                    <div>\r\n                        <p>내 옷의 치수를 직접 제어보세요.</p>\r\n                        <p>귀찮음은 잠깐, 편리함은 계속!</p>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n            <main>\r\n                <div className={`selectOption ${(data && data.praw) ? \"on\" : null}`} ref={productInputWrapper}>\r\n                    <input type=\"hidden\" value=\"true\" />\r\n                    <p onClick={(e) => event.onSelect(e)}>네, 알고있어요.</p>\r\n                    <div>\r\n                        <div className=\"select-column-wrapper\">\r\n                            <div className=\"row-input-frame\">\r\n                                <input \r\n                                    type=\"text\"\r\n                                    ref={productInput}\r\n                                    onKeyPress={(e) => e.key === \"Enter\" ? event.productSearch() : null}\r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"http://\"\r\n                                    defaultValue={(data && data.praw && data.praw.full) ? `${data.praw.full}` : ''}\r\n                                />\r\n                                <i className=\"material-icons\" onClick={() => event.productSearch()}>search</i>\r\n                            </div>\r\n                            {\r\n                                (product && product.size) ? (\r\n                                    <>\r\n                                        <p>상품의 사이즈를 선택해주세요.</p>\r\n                                        <div className=\"shop-info-frame\">\r\n                                            <p>{product.info.sname}</p>\r\n                                            <h1>{product.info.pname}</h1>\r\n                                        </div>\r\n                                        <ul ref={sizeListFrame}>\r\n                                            {product.size.map((element,index) => (\r\n                                                <li key={index} className=\"size-element\" onClick={(e) => event.onSize(element.name, index, e)}>\r\n                                                    <p>{element.name}</p>\r\n                                                    <input type=\"hidden\" value={element.name}></input>\r\n                                                </li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </>\r\n                                ) : (product && product.status === 404) ? (\r\n                                    <div className=\"no-data\">\r\n                                        <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                        <p>입력하신 상품 정보가 아직 없어요.</p>\r\n                                    </div>\r\n                                ) : null\r\n                            }   \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"selectOption\">\r\n                    <input type=\"hidden\" value=\"false\" />\r\n                    <p onClick={(e) => event.onSelect(e)}>아니요, 모르겠어요.</p>\r\n                </div>\r\n                <div className=\"apply\" >\r\n                    <h1 ref={applyBtn} onClick={() => event.apply()}>다음단계</h1>\r\n                </div>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Step1;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step2.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductType.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\PasswordChange.js",["238"],"import axios from \"axios\";\r\nimport { useContext, useRef, useState } from \"react\";\r\n\r\n// Context\r\nimport { ServerContext } from '../../App';\r\n\r\n\r\nconst ChangePassword = ({history}) => {\r\n\r\n    // State\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n\r\n    // Ref\r\n    const n_p = useRef(null); // now password\r\n    const c_p = useRef(null); // change password\r\n    const rc_p = useRef(null); // re change password\r\n    const alertWrapper = useRef(null);\r\n\r\n    const event = {\r\n        changePassword : async () => {\r\n            function isPwd(passwordRef) {\r\n                if(!(/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(passwordRef.current.value)) {\r\n                    // 패턴과 불일치\r\n                    passwordRef.current.classList.add(\"wrong\");\r\n                    event.alertToggle(true, \"사용할 수 없는 비밀번호 입니다.\");\r\n                    return false;\r\n                } else {\r\n                    passwordRef.current.classList.remove(\"wrong\");\r\n                    return true;\r\n                }\r\n            }\r\n            const passwordRefs = [n_p, c_p, rc_p];\r\n            let pass = true;\r\n            for(let passwordRef of passwordRefs) {\r\n                if(!isPwd(passwordRef)) {\r\n                    pass = false;\r\n                    break;\r\n                }\r\n            };\r\n            if(!pass) return false;\r\n            const cv = c_p.current.value;\r\n            if(cv !== rc_p.current.value) {\r\n                rc_p.current.classList.add(\"wrong\");\r\n                event.alertToggle(true, \"변경할 비밀번호가 일치하지 않습니다.\");\r\n                return false;\r\n            } else rc_p.current.classList.remove(\"wrong\");\r\n            \r\n            setLoader(true);\r\n            const response = await axios({\r\n                method : \"PATCH\",\r\n                url: `${server}/user`,\r\n                data : {\r\n                    type: \"password\",\r\n                    now : n_p.current.value,\r\n                    change : cv\r\n                },\r\n                withCredentials: true,\r\n                timeout: 3000\r\n            }).catch((err) => {\r\n                if(!err.response?.status) return {data:{status:500}}\r\n                switch(err.response.status) {\r\n                    case 401 : {\r\n                        return {data:{status:401}};\r\n                    }\r\n                    default : {\r\n                        return {data:{status:500}};\r\n                    }\r\n                }\r\n            }).finally(() => {\r\n                setLoader(false);\r\n            });\r\n            if(response?.data?.status) {\r\n                switch(response.data.status) {\r\n                    case 200 : {\r\n                        // 200 변경 성공\r\n                        history.goBack();\r\n                        break;\r\n                    }\r\n                    case -1 : {\r\n                        // -1 현재 패스워드 일치 하지 않음\r\n                        event.alertToggle(true, \"현재 비밀번호를 확인해주세요.\");\r\n                        break;\r\n                    }\r\n                    case -200 : {\r\n                        // -200 변경 실패\r\n                        event.alertToggle(true, \"서버오류로 인해 변경에 실패하였습니다.\");\r\n                        break;\r\n                    }\r\n                    case 404 : {\r\n                        // 404 유저 데이터 찾을 수 없음 UserModel.findById(불가)\r\n                        event.alertToggle(true, \"잠시 후 다시 요청해주세요.\");\r\n                        break;\r\n                    }\r\n                    case -404 : {\r\n                        // -404 요청 데이터 형식을 갖추고 있지 않음\r\n                        event.alertToggle(true, \"잘못된 접근입니다.\");\r\n                        break;\r\n                    }\r\n                    case 401 : {\r\n                        // auth Error\r\n                        event.alertToggle(true, \"잘못된 접근입니다.\");\r\n                        break;\r\n                    }\r\n                    default : {\r\n                        // server Error\r\n                        event.alertToggle(true,     \"잠시 후 다시 요청해주세요.\");\r\n                    }\r\n                }\r\n            } else event.alertToggle(true, \"잠시 후 다시 요청해주세요.\");\r\n        },\r\n        alertToggle : (force, text) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(text !== undefined) alertWrapper.current.querySelector(\"h1\").innerHTML = text;\r\n            }\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section id=\"Setting\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <h1 style={{color:\"#ff0000\"}}></h1>\r\n                </div>\r\n                <div className=\"alert-closer\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>비밀번호 변경</h1>\r\n                <p>최소 90일마다 비밀번호 변경을 권장드려요.</p>\r\n                <p>안전한 비밀번호로 변경해주세요.</p>\r\n            </header>\r\n            <article>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>현재 비밀번호</h2>\r\n                        <p>변경 전 비밀번호를 입력해주세요.</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"password\" placeholder=\"현재 비밀번호\" ref={n_p} minLength=\"8\" maxLength=\"25\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>변경할 비밀번호</h2>\r\n                        <p>변경하려는 비밀번호를 입력해주세요.</p>\r\n                        <p>영문 대소문자, 숫자, 특수문자 포함 8~20자</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                    <input type=\"password\" placeholder=\"변경 비밀번호\" ref={c_p} minLength=\"8\" maxLength=\"25\"/>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"password\" placeholder=\"변경 비밀번호 확인\" ref={rc_p} minLength=\"8\" maxLength=\"25\"/>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n            <div className=\"footer-btn\">\r\n                <div onClick={() => event.changePassword()}>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loader\"></div>\r\n                        ) : (\r\n                            <p>변경</p>\r\n                        )\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChangePassword;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\InformaionChange.js",["239"],"import axios from \"axios\";\r\nimport { useContext, useRef, useState } from \"react\";\r\n\r\n// Context\r\nimport {ServerContext} from '../../App';\r\nimport {LoginContext} from '../../App';\r\n\r\n\r\nconst ChangeUserInfomation = ({history}) => {\r\n    // Context \r\n    const server = useContext(ServerContext);\r\n    const {userInfo, setUserInfo} = useContext(LoginContext);\r\n    if(!userInfo?._id) history.replace('/notlogin')\r\n    console.log(history)\r\n\r\n    // State\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    // Field\r\n    const userData = (()=> {\r\n        try {\r\n            let {username, name} = JSON.parse(localStorage.getItem(\"authWithSizelity\"));\r\n            if(!username) username = \"\";\r\n            if(!name) name = \"\";\r\n            return {username, name};\r\n        } catch {\r\n            return {username: \"\", name: \"\"}\r\n        }\r\n    })();\r\n\r\n    // Ref\r\n    const alertWrapper = useRef(null);\r\n    const email = useRef(null);\r\n    const name = useRef(null);\r\n    const password = useRef(null);\r\n\r\n    const event = {\r\n        changeInfo : async () => {\r\n            if(!password.current.value) {\r\n                event.alertToggle(true,\"비밀번호를 입력해주세요.\");\r\n                return;\r\n            }\r\n            if(!(/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(password.current.value)) {\r\n                event.alertToggle(true,\"형식에 맞지 않는 비밀번호 입니다.\");\r\n                return;\r\n            }\r\n\r\n            const change = {\r\n                type : \"info\",\r\n                now : password.current.value,\r\n                cate : [],\r\n            };\r\n            if(userData?.username !== email.current.value) {\r\n                // Email 변경\r\n                const isEmail = ((value) => {\r\n                    return (/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n                })(email.current.value);\r\n\r\n                if(!isEmail) {\r\n                    event.alertToggle(true, \"이메일 형식이 올바르지 않습니다.\");\r\n                    return;\r\n                }\r\n                change.uid = email.current.value;\r\n                change.cate.push(\"email\");\r\n            }\r\n            if(userData?.name !== name.current.value) {\r\n                // 이름 변경\r\n                if(name.current.value < 2 || name.current.value > 20) {\r\n                    event.alertToggle(true, \"이름의 형식이 올바르지 않습니다.\");\r\n                    return;\r\n                }\r\n                change.name = name.current.value;\r\n                change.cate.push(\"name\");\r\n            }\r\n            if(change.cate.length === 0) {event.alertToggle(true, \"변경 점이 없습니다.\"); return;}\r\n            setLoader(true);\r\n            const response = await axios({\r\n                method: \"PATCH\",\r\n                url : server + '/user',\r\n                data : change,\r\n                withCredentials: true,\r\n                timeout: 3000\r\n            }).catch((err) => {\r\n                if(!err.response?.status) return {data:{status:500}}\r\n                switch(err.response.status) {\r\n                    case 401 : {\r\n                        return {data:{status:401}};\r\n                    }\r\n                    default : {\r\n                        return {data:{status:500}};\r\n                    }\r\n                }\r\n            }).finally(() => {\r\n                setLoader(false);\r\n            });;\r\n            console.log(\"수정 응답 결과 : \", response.data);\r\n            if(response?.data?.status) {\r\n                switch(response.data.status) {\r\n                    case 200 : {\r\n                        // 200 변경 성공 : web 정보 변경\r\n                        const local = JSON.parse(localStorage.getItem(\"authWithSizelity\"));\r\n                        for(let cate of change.cate) {\r\n                            switch (cate) {\r\n                                case \"email\" : {local.username = change.uid; break;}\r\n                                case \"name\" : {local.name = change.name; break;}\r\n                                default : {break;}\r\n                            }\r\n                        }\r\n                        localStorage.setItem('authWithSizelity',JSON.stringify(local));\r\n                        const session = JSON.parse(sessionStorage.getItem('auth'));\r\n                        session.name = change.name;\r\n                        sessionStorage.setItem('auth', JSON.stringify(session));\r\n                        setUserInfo(session);\r\n                        history.goBack();\r\n                        break;\r\n                    }\r\n                    case -1 : {\r\n                        // -1 현재 패스워드 일치 하지 않음\r\n                        event.alertToggle(true, \"현재 비밀번호를 확인해주세요.\");\r\n                        break;\r\n                    }\r\n                    case -200 : {\r\n                        // -200 변경 실패\r\n                        event.alertToggle(true, \"서버오류로 인해 변경에 실패하였습니다.\");\r\n                        break;\r\n                    }\r\n                    case 404 : {\r\n                        // 404 유저 데이터 찾을 수 없음 UserModel.findById(불가)\r\n                        event.alertToggle(true, \"잠시 후 다시 시도해주세요.\");\r\n                        break;\r\n                    }\r\n                    case -404 : {\r\n                        // -404 요청 데이터 형식을 갖추고 있지 않음\r\n                        event.alertToggle(true, \"잘못된 접근입니다.\");\r\n                        break;\r\n                    }\r\n                    case 401 : {\r\n                        // auth Error\r\n                        event.alertToggle(true, \"잘못된 접근입니다.\");\r\n                        break;\r\n                    }\r\n                    default : {\r\n                        // server Error\r\n                        event.alertToggle(true, \"잠시 후 다시 시도해주세요.\");\r\n                    }\r\n                }\r\n            } else event.alertToggle(true, \"잠시 후 다시 시도해주세요.\");\r\n        },\r\n        alertToggle : (force, text) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(text !== undefined) alertWrapper.current.querySelector(\"h1\").innerHTML = text;\r\n            }\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        }, // alertToggle\r\n        accountout : () => {\r\n            history.push(\"/setting/accountout\");\r\n        }\r\n    }\r\n    return (\r\n        <section id=\"Setting\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <h1 style={{color:\"#ff0000\"}}></h1>\r\n                </div>\r\n                <div className=\"alert-closer\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>개인정보 수정</h1>\r\n            </header>\r\n            <article>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>비밀번호 입력</h2>\r\n                        <p>사용자를 확인합니다.</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"password\" placeholder=\"사용자를 확인합니다.\" ref={password} minLength=\"8\" maxLength=\"25\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>이메일</h2>\r\n                        <p>이메일은 로그인 및 비밀번호를 찾을 때 이용됩니다.</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"email\" placeholder=\"E-Mail\" ref={email} defaultValue={userData?.username}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>이름</h2>\r\n                        <p>변경하려는 이름을 입력해주세요.</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"text\" placeholder=\"사용자 이름\" ref={name} minLength=\"2\" maxLength=\"20\" defaultValue={userData?.name}/>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n            <div className=\"signout\">\r\n                <p onClick={() => event.accountout()}>Sizelity 계정 삭제</p>\r\n            </div>\r\n            <div className=\"footer-btn\">\r\n                <div onClick={() => event.changeInfo()}>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loader\"></div>\r\n                        ) : (\r\n                            <p>변경</p>\r\n                        )\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ChangeUserInfomation;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step3.js",["240","241"],"import Proptype from 'prop-types'\r\nimport { ptype } from '../../../contents/js/ProductType';\r\nimport { useEffect, useRef } from 'react';\r\n\r\n// CSS\r\nimport '../../../contents/css/UserProduct/Step3.css';\r\n\r\nconst Step3 = ({data, setData, setStep, alertToggle}) => {\r\n\r\n    const __data = JSON.parse(JSON.stringify(data));\r\n\r\n    const applyBtn = useRef(null);\r\n    const listWrapper = useRef(null);\r\n    const subInputWrapper = useRef(null);\r\n    const subInput = useRef(null);\r\n    const subTextFrame = useRef(null);\r\n\r\n    const option = useRef({\r\n        type : undefined,\r\n        typeFrame : undefined,\r\n        subtype : undefined\r\n    });\r\n    const event = {\r\n        onType : (type, e) => {\r\n            if(listWrapper.current.classList.contains(\"close\")) {\r\n                event.listToggle(false);\r\n                event.subInputToggle(true);\r\n            } else {\r\n                if(e) e.stopPropagation();\r\n                else return;\r\n                let frame = e.target;\r\n                for(let i=0; i < 3; ++i) {\r\n                    if(frame.classList.contains(\"size-element\")) break;\r\n                    frame = frame.parentElement;\r\n                }\r\n                if(frame.classList.contains(\"size-element\")) {\r\n                    if(frame === option.current.typeFrame) {\r\n                        event.listToggle(true);\r\n                        event.subInputToggle(false);\r\n                    } else {\r\n                        if(option.current.typeFrame) {\r\n                            option.current.typeFrame.classList.remove(\"on\");\r\n                        }\r\n                        frame.classList.add(\"on\");\r\n    \r\n                        option.current.type = type;\r\n                        option.current.typeFrame = frame;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        listToggle : (force) => {\r\n            if(!listWrapper.current) return;\r\n            else {\r\n                listWrapper.current.classList.toggle(\"close\", force);\r\n                if(!force) applyBtn.current.innerHTML = \"적용\";\r\n            }\r\n        },\r\n        subInputToggle : (force) => {\r\n            if(!subInputWrapper.current) return;\r\n            else {\r\n                subInputWrapper.current.classList.toggle(\"close\",force);\r\n                if(!force) applyBtn.current.innerHTML = \"적용\";\r\n            }\r\n        },\r\n        subTextToggle : (force) => {\r\n            if(!subTextFrame.current) return;\r\n            else {\r\n                subTextFrame.current.classList.toggle(\"close\",force);\r\n            }\r\n        },\r\n        apply : () => {\r\n            if(!listWrapper.current.classList.contains(\"close\")) {\r\n                if(option.current.type) {\r\n                    event.listToggle(true);\r\n                    event.subInputToggle(false);\r\n                }\r\n                else alertToggle(true,\"종류를 선택해주세요.\");\r\n            } else {\r\n                if(!subInputWrapper.current.classList.contains(\"close\")) {\r\n                    const sub = subInput.current.value;\r\n                    if(sub.length === 0 || (sub.length > 1 && sub.length < 9 )) {\r\n                        subTextFrame.current.querySelector(\"h1\").innerHTML = sub;\r\n                        sub.length === 0 ? option.current.subtype = undefined : option.current.subtype = sub;\r\n                        event.subInputToggle(true);\r\n                        sub.length === 0 ? event.subTextToggle(true) : event.subTextToggle(false);\r\n                        applyBtn.current.innerHTML = \"다음단계\";\r\n                    } else {\r\n                        option.current.subtype = undefined;\r\n                        event.subTextToggle(true);\r\n                        alertToggle(true,\"세부 종류는 생략 또는 2~8 글자 입력이 가능합니다.\");\r\n                    }\r\n                } else {\r\n                    // 다음 단계\r\n                    console.log(\"저장하려는 데이터 : \", option.current);\r\n                    \r\n                    __data.info.ptype = option.current.type;\r\n                    __data.info.subtype = option.current.subtype;\r\n                    setData(__data);\r\n                    setStep(4);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        // 기본 설정\r\n        if(__data.info.ptype) {\r\n            if(listWrapper.current) {\r\n                let frame = listWrapper.current.querySelector(`input[type='hidden'][value='${__data.info.ptype}']`);\r\n                if(frame) {\r\n                    frame = frame.parentElement;\r\n                    frame.classList.add(\"on\");\r\n                    option.current.type = __data.info.ptype;\r\n                    option.current.typeFrame = frame;\r\n                    if(__data.info.subtype) option.current.subtype = __data.info.subtype;\r\n                }\r\n            }\r\n        }\r\n    }, []);\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>어떤 종류인가요?</h1>\r\n                <p>어떤 종류의 옷인가요?</p>\r\n                <p>종류별로 정리되어 저장됩니다.</p>\r\n            </header>\r\n            <main>\r\n                <div className=\"ptype-list-frame\">\r\n                    <ul ref={listWrapper} className={__data.info.ptype ? \"close\" : null}>\r\n                        {\r\n                            ptype.map((element, index) => {\r\n                                return (\r\n                                    <li key={index} className=\"size-element\" onClick={(e) => event.onType(element.value, e)}>\r\n                                        <h1>{element.name}</h1>\r\n                                        <div className=\"dot\"></div>\r\n                                        <input type=\"hidden\" value={element.value} />\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ul>\r\n                    <div className=\"out close\" ref={subTextFrame} onClick={() => {event.subInputToggle(false); event.listToggle(true);}}>\r\n                        <h1></h1>\r\n                        <div className=\"dot\"></div>\r\n                    </div>\r\n                    <div className={`in ${__data.info.ptype ? null : \"close\"}`} ref={subInputWrapper}>\r\n                        <div className=\"sub-input-wrapper\">\r\n                            <div className=\"title\">\r\n                                <h1>세부 종류 입력</h1>\r\n                                <p>추후 쉽게 구별하기 위해</p>\r\n                                <p>입력하는 것을 추천합니다</p>\r\n                            </div>\r\n                            <div className=\"sub-input-frame\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"ex) 긴바지, 반팔\"\r\n                                    defaultValue={__data.info.subtype? __data.info.subtype : null}\r\n                                    ref={subInput}/>\r\n                                <p>생략 또는 2 ~ 8글자</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"apply\" >\r\n                    <h1 ref={applyBtn} onClick={() => event.apply()}>적용</h1>\r\n                </div>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nStep3.proptype = {\r\n    data : Proptype.object.isRequired,\r\n    setData : Proptype.func.isRequired,\r\n    setStep : Proptype.func.isRequired,\r\n    alertToggle : Proptype.func.isRequired\r\n}\r\n\r\nexport default Step3;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step\\Step4.js",["242"],"import Proptype from 'prop-types'\r\nimport { useEffect, useRef } from 'react';\r\nimport { sizeName, getSizeRate } from '../../../contents/js/ProductType';\r\n\r\n// CSS\r\nimport '../../../contents/css/UserProduct/Step4.css';\r\n\r\nconst Step4 = ({data, setData, setStep, alertToggle, save}) => {\r\n\r\n    // Copy\r\n    const __data = JSON.parse(JSON.stringify(data));\r\n\r\n    // Ref\r\n    const listWrapper = useRef(null);\r\n    const rateWrapper = useRef(null);\r\n    const applyBtn = useRef(null);\r\n    const option = useRef({\r\n        size : undefined,\r\n        sizeFrame : undefined\r\n    });\r\n\r\n    // Field\r\n    const sizeRate = getSizeRate(data.info?.ptype);\r\n    console.log(\"세부항목 : \",sizeRate)\r\n    const event = {\r\n        onType : (type, e) => {\r\n            if(listWrapper.current.classList.contains(\"close\")) {\r\n                event.listToggle(false);\r\n                event.rateListToggle(true);\r\n            } else {\r\n                if(e) e.stopPropagation();\r\n                else return;\r\n                let frame = e.target;\r\n                for(let i=0; i < 3; ++i) {\r\n                    if(frame.classList.contains(\"size-element\")) break;\r\n                    frame = frame.parentElement;\r\n                }\r\n                if(frame.classList.contains(\"size-element\")) {\r\n                    if(frame === option.current.sizeFrame) {\r\n                        event.listToggle(true);\r\n                        event.rateListToggle(false);\r\n                    } else {\r\n                        if(option.current.sizeFrame) {\r\n                            option.current.sizeFrame.classList.remove(\"on\");\r\n                        }\r\n                        frame.classList.add(\"on\");\r\n                        if(type === '직접입력') {\r\n                            const inputSize = frame.querySelector(\"input.size-input\").value;\r\n                            console.log(inputSize);\r\n                        } else {\r\n                            option.current.size = type;\r\n                            __data.size.name = type;\r\n                        }\r\n                        option.current.sizeFrame = frame;\r\n                        setData(__data);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        listToggle : (force) => {\r\n            if(!listWrapper.current) return;\r\n            else {\r\n                listWrapper.current.classList.toggle(\"close\", force);\r\n                if(!force) applyBtn.current.innerHTML = \"적용\";\r\n            }\r\n        },\r\n        inputSizeApply : (value) => {\r\n            if(__data === value) return;\r\n            option.current.size = value;\r\n            __data.size.name = value;\r\n            setData(__data);\r\n        },\r\n        onSize : (e) => {\r\n            if(!e) return;\r\n            e.stopPropagation();\r\n            if(rateWrapper.current.classList.contains(\"close\")) {\r\n                event.listToggle(true);\r\n                event.rateListToggle(false);\r\n            } else {\r\n                let frame = e.target;\r\n                for(let i=0; i < 3; ++i) {\r\n                    if(frame.classList.contains(\"size-element\")) break;\r\n                    frame = frame.parentElement;\r\n                }\r\n                if(!frame.classList.contains(\"size-element\")) return;\r\n                frame.classList.toggle(\"on\");\r\n            }\r\n            \r\n        },\r\n        rateListToggle : (force) => {\r\n            if(!rateWrapper.current) return;\r\n            if(force === undefined) force = !rateWrapper.current.classList.contains(\"close\");\r\n            rateWrapper.current.classList.toggle(\"close\",force);\r\n            if(!force) applyBtn.current.innerHTML = \"적용\";\r\n        },\r\n        apply : () => {\r\n            if(!listWrapper.current.classList.contains(\"close\")) {\r\n                if(option.current.size) {\r\n                    event.listToggle(true);\r\n                    event.rateListToggle(false);    \r\n                } else alertToggle(true, \"사이즈가 필요해요\");\r\n            } else if(!rateWrapper.current.classList.contains(\"close\")) {\r\n                // 하나 이상은 설정해야됨\r\n                if(rateWrapper.current.querySelectorAll(\".on\").length > 0) {\r\n                    applyBtn.current.innerHTML = \"저장\";\r\n                    event.rateListToggle(true);\r\n                    let pass = true;\r\n                    const rate = {};\r\n                    const frameArr = rateWrapper.current.querySelectorAll(\".on\");\r\n                    \r\n                    for(const frame of frameArr) {\r\n                        const name = frame.querySelector(\"input[type='hidden']\").value;\r\n                        const value = Number(frame.querySelector(\"input[type='number']\").value);\r\n                        if(value < 1) {\r\n                            pass = false;\r\n                            break;\r\n                        } else {\r\n                            rate[name] = value;\r\n                        }\r\n                    }\r\n                    if(!pass) alertToggle(true, \"입력한 수치 정보가 잘못되었습니다.\");\r\n                    else {\r\n                        rate.name = option.current.size\r\n                        __data.size = rate;\r\n                        setData(__data);\r\n                        setStep(4);\r\n                    }\r\n                }\r\n                else alertToggle(true, \"하나 이상의 수치가 필요해요\");\r\n            } else {\r\n                // Save\r\n                save();\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(__data.size?.name) {\r\n            if(listWrapper.current) {\r\n                let frame = listWrapper.current.querySelector(`input[type='hidden'][value='${__data.size.name}']`);\r\n                if(frame) {\r\n                    frame = frame.parentElement;\r\n                } else {\r\n                    frame = listWrapper.current.querySelector(`input[type='hidden'][value='직접입력']`).parentElement;\r\n                    console.log(frame);\r\n                    listWrapper.current.querySelector(`input.size-input`).value = __data.size.name;\r\n                }\r\n                frame.classList.add(\"on\");\r\n                option.current.size = __data.size.name;\r\n                option.current.sizeFrame = frame;\r\n            }\r\n            console.log(Object.entries(__data.size));\r\n            for(const [key, value] of Object.entries(__data.size)) {\r\n                if(key !== 'name') {\r\n                    let frame = rateWrapper.current.querySelector(`input[type='hidden'][value='${key}']`);\r\n                    if(frame) {\r\n                        frame.parentElement.classList.add(\"on\");\r\n                        frame.parentElement.querySelector(`input.size-input`).value = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, []);\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>사이즈 수치입력</h1>\r\n                <p>저장하려는 상품의 사이즈 수치를 입력해주세요.</p>\r\n            </header>\r\n            <main>\r\n                <div className=\"ptype-list-frame\">\r\n                    <ul ref={listWrapper} className={__data.size?.name ? 'close' : null}>\r\n                        {\r\n                            sizeName.map((element, index) => (\r\n                                <li key={index} className=\"size-element\" >\r\n                                    <h1 onClick={(e) => event.onType(element, e)}>{element}</h1>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"hidden\" value={element} />\r\n                                    {\r\n                                        element === '직접입력' ? (\r\n                                            <div className=\"input-wrapper\">\r\n                                                <input \r\n                                                    type=\"text\" \r\n                                                    className=\"size-input\" \r\n                                                    onBlur={(e) => event.inputSizeApply(e.target.value)}\r\n                                                    onKeyDown={(e) => {if(e.key === 'Enter') event.inputSizeApply(e.target.value)}}\r\n                                                    placeholder=\"ex. XXL, 30, 260\" \r\n                                                    minLength=\"1\" \r\n                                                    maxLength=\"10\"/>\r\n                                            </div>\r\n                                        ) : null\r\n                                    }\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                \r\n                <div className=\"ptype-list-frame\">\r\n                    <ul ref={rateWrapper} className={`${__data.size?.name ? null : 'close'} rate`}>\r\n                        \r\n                        {\r\n                            sizeRate.map((element, index) => (\r\n                                <li key={index} className=\"size-element\" >\r\n                                    <h1 onClick={(e) => event.onSize(e)}>{element[1]}</h1>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"hidden\" value={element[0]} />\r\n                                    <div className=\"input-wrapper\">\r\n                                        <input \r\n                                            type=\"number\" \r\n                                            className=\"size-input\"\r\n                                            placeholder=\"0 (cm)\" \r\n                                            minLength=\"1\" \r\n                                            maxLength=\"7\"/>\r\n                                    </div>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <div className=\"apply\" >\r\n                    <h1 ref={applyBtn} onClick={() => event.apply()}>적용</h1>\r\n                </div>\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\nStep4.proptype = {\r\n    data : Proptype.object.isRequired,\r\n    setData : Proptype.func.isRequired,\r\n    setStep : Proptype.func.isRequired,\r\n    alertToggle : Proptype.func.isRequired,\r\n    save : Proptype.func.isRequired\r\n}\r\n\r\nexport default Step4;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\HelpRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Help\\Help.js",["243"],"import { useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// CSS\r\nimport '../../contents/css/help.css';\r\n\r\nconst Help = ({history}) => {\r\n    const alertWrapper = useRef(null);\r\n\r\n    const event = {\r\n        alertToggle : (force, text) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(text !== undefined) alertWrapper.current.querySelector(\"h1\").innerHTML = text;\r\n            }\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        }\r\n    }\r\n    return (\r\n        <section id=\"Help\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <h1 style={{color:\"#ff0000\"}}></h1>\r\n                </div>\r\n                <div className=\"alert-closer\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>도움이</h1><h1> 필요하신가요?</h1>\r\n            </header>\r\n            <article>\r\n                <div className=\"account-wrapper\">\r\n                    <button onClick={() => event.alertToggle(true, \"준비중입니다.\")}>\r\n                        <p>비밀번호를 잊어버렸어요.</p>\r\n                    </button>\r\n                </div>\r\n                <div className=\"connect-wrapper\">\r\n                    <div>\r\n                        <Link><p>문의하기</p></Link>\r\n                    </div>\r\n                    <div>\r\n                        <Link><p>개선사항을 보내주세요</p></Link>\r\n                    </div>\r\n                    <div>\r\n                        <Link><p>자주묻는 질문</p></Link>\r\n                    </div>\r\n                </div>\r\n            </article>\r\n            <footer>\r\n                <div>\r\n                    <Link>이용약관</Link>\r\n                    <div></div>\r\n                    <Link>개인정보처리방침</Link>\r\n                    <div></div>\r\n                    <Link>Sizelity정책</Link>\r\n                </div>\r\n                <div>\r\n                    <Link className=\"logo\">Sizelity</Link>\r\n                </div>\r\n            </footer>\r\n        </section>\r\n    );\r\n}\r\nexport default Help;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\AccountOut.js",["244"],"import { useContext, useRef, useState } from \"react\";\r\nimport { ServerContext } from \"../../App\";\r\nimport AccountModule from '../../contents/js/Account';\r\n// Context\r\nimport {LoginContext} from '../../App';\r\n\r\nlet accountModule = null;\r\nconst AccountOut = ({history}) => {\r\n    // State\r\n    const [loader, setLoader] = useState(false);\r\n    const [isOther, setIsOther] = useState(false);\r\n\r\n    // Ref\r\n    const alertWrapper = useRef(null);\r\n    const SendData = useRef({\r\n        password : \"\",\r\n        option : \"\",\r\n        suggest : \"\"\r\n    });\r\n\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n    const {userInfo ,setUserInfo} = useContext(LoginContext);\r\n    \r\n    if(!userInfo)  {\r\n        history.replace(\"/notlogin\");\r\n        return null;\r\n    }\r\n\r\n    const event = {\r\n        alertToggle : (force, text) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(text !== undefined) alertWrapper.current.querySelector(\"h1\").innerHTML = text;\r\n            }\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        }, // alertToggle\r\n        send : async (data) => {\r\n            setLoader(true);\r\n            const {password, option} = data;\r\n            if(password.length === 0) {\r\n                event.alertToggle(true,\"비밀번호를 입력해주세요.\");\r\n                return;\r\n            }\r\n            if(!(/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(password)) {\r\n                event.alertToggle(true,\"형식에 맞지 않는 비밀번호 입니다.\");\r\n                return;\r\n            }\r\n            if(option === \"\") {\r\n                event.alertToggle(true,\"탈퇴 사유를 선택해주세요.\");\r\n                return;\r\n            }\r\n            if(!accountModule) accountModule = new AccountModule(server);\r\n            \r\n            const response = await accountModule.remove(data);\r\n            if(response.type === 'success') {\r\n                setUserInfo(null);\r\n                history.replace(\"/\");\r\n            } else {\r\n                setLoader(false);\r\n                event.alertToggle(true, response.msg);\r\n            }\r\n            \r\n        }, // outOfAccount\r\n    };\r\n    return (\r\n        <section id=\"Setting\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <h1 style={{color:\"#ff0000\"}}></h1>\r\n                </div>\r\n                <div className=\"alert-closer\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>회원 탈퇴</h1>\r\n            </header>\r\n            <article>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>비밀번호 입력</h2>\r\n                        <p>사용자를 확인합니다.</p>\r\n                    </div>\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"password\" placeholder=\"사용자를 확인합니다.\" onChange={e => SendData.current.password = e.target.value} minLength=\"8\" maxLength=\"25\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"change-wrapper\">\r\n                    <div className=\"title\">\r\n                        <h2>탈퇴 사유를 알려주세요</h2>\r\n                        <p>Sizelity 발전을 위해 소중한 의견을 전달해주세요.</p>\r\n                    </div>\r\n                    <div className=\"option-wrapper\">\r\n                        <select defaultValue=\"\" onChange={(e) => {SendData.current.option = e.target.value; setIsOther(e.target.value === \"other\")}}>\r\n                            <option value=\"\" disabled hidden>탈퇴사유를 알려주세요</option>\r\n                            <option value=\"lessInfo\">필요한 정보가 없어요</option>\r\n                            <option value=\"howCan\">어떻게 사용하는지 모르겠어요</option>\r\n                            <option value=\"otherService\">유사 서비스를 사용해요</option>\r\n                            <option value=\"uncomfortable\">불편해요</option>\r\n                            <option value=\"other\">기타</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    \r\n                </div>\r\n                {\r\n                    isOther ? (\r\n                        <div className=\"suggest-wrapper\">\r\n                            <input type=\"text\" maxLength=\"200\" placeholder=\"기타 사유를 알려주세요\" onChange={e => SendData.current.suggest = e.target.value}/>\r\n                         </div>\r\n                     ): null\r\n                }\r\n            </article>\r\n            <div className=\"footer-btn\">\r\n                <div onClick={() => event.send(SendData.current)}>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loader\"></div>\r\n                        ) : (\r\n                            <p>탈퇴</p>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AccountOut;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\ViewRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\StatusCode.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\SearchHistory.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\UserProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProductRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\CompareRouter.js",["245"],"import React, {createContext, useEffect, useState ,useContext} from 'react';\r\nimport ProductSearch from '../contents/js/ProductSearch';\r\n// CSS\r\nimport '../contents/css/Compare/Compare_Router.css';\r\n\r\n// Component\r\nimport Main from '../components/Compare/Compare_Main';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\n// Context\r\nimport {ServerContext} from '../App';\r\nexport const ProductContext = createContext(null);\r\n\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst Compare = ({history, location}) => {\r\n    // State\r\n    const [productData, setProductData] = useState(location?.state?.productData);\r\n    const [loader, setLoader] = useState(!productData);\r\n    const [status, setStatus] = useState(0);\r\n\r\n    // Context \r\n    const server = useContext(ServerContext);\r\n\r\n    // Field\r\n    const _useQuery = useQuery();\r\n\r\n\r\n    async function getProduct() {\r\n        // 상품 정보 없음. -> 검색\r\n        const _ProductSearch = new ProductSearch(server);\r\n        let _searchResult = null;      // 검색한 상품 정보 또는 결과 Status 를 보관할 변수\r\n        if(_useQuery.get(\"domain\")) {\r\n            console.log(\"url 전체를 활용하여 검색\");\r\n            // ?domain= 이 존재\r\n            _searchResult = await _ProductSearch.search({url : _useQuery.get(\"domain\")});\r\n        } else {\r\n            console.log(\"shop + code를 활용하여 검색\");\r\n            _searchResult = await _ProductSearch.search({domain : _useQuery.get(\"shop\"), code : _useQuery.get(\"no\")});\r\n        }\r\n        console.log(\"결과 : \",_searchResult);\r\n        try {\r\n            if(typeof _searchResult === 'number') {\r\n                // 검색 결과 오류\r\n                setStatus(_searchResult);\r\n            } else {\r\n                if(_searchResult?._id) {\r\n                    setProductData(_searchResult);\r\n                } else {\r\n                    // 비어있는 값 (정보 없음.)\r\n                    setStatus(204);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n            setStatus(500);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => { \r\n        if(!productData) { getProduct(); }\r\n    }, []); // useEffect\r\n\r\n    return (\r\n        loader ? (\r\n            <section id=\"Compare\">\r\n                <div className=\"loader\" style={{\r\n                    border: \"2px solid #888888\",\r\n                    borderTop:\"2px solid #00000000\",\r\n                    width:\"2rem\",\r\n                    height:\"2rem\"\r\n                }}></div>\r\n            </section>\r\n        ) : (\r\n            productData ? (\r\n                <ProductContext.Provider value={productData}>\r\n                    <Main \r\n                        history={history}\r\n                        productData={productData}\r\n                    />\r\n                </ProductContext.Provider>\r\n            ) : (\r\n                <section id=\"Compare\">\r\n                    {\r\n                        status === 204 ? (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>죄송합니다.</h1>\r\n                                <h1>상품 정보가 없습니다.</h1>\r\n                                <p>입력하신 상품의 사이즈 정보는</p>\r\n                                <p>영업일 기준 2일이내에 자동으로 입력됩니다.</p>\r\n                                <button onClick={() => history.replace(\"/search\")}>다른 상품 검색</button>\r\n                            </div>\r\n                        ) : status === 400 ? (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>죄송합니다.</h1>\r\n                                <h1>문제가 발생했습니다.</h1>\r\n                                <p>잘못된 요청 정보를 전달하였습니다.</p>\r\n                            </div>\r\n                        ) : status === 500 ? (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>죄송합니다.</h1>\r\n                                <h1>잠시 후 다시 시도해주세요.</h1>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>잘못된 접근입니다.</h1>\r\n                                <p>상품을 검색할 수 없습니다.</p>\r\n                                <button onClick={() => history.replace(\"/search\")}>다른 상품 검색</button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    <footer>\r\n                        <Link to=\"/\">Sizelity</Link>\r\n                    </footer>\r\n                </section>\r\n            )\r\n        )\r\n    )\r\n}\r\n\r\n//export default React.memo(Compare);\r\nexport default Compare;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\AfterProduct.js",["246"],"import axios from 'axios';\r\nimport StatusCode from './StatusCode';\r\nclass AfterProduct {\r\n    constructor(server) {\r\n        this.server = server;\r\n    }\r\n    // 불러오기\r\n    async get() {\r\n        return await axios({\r\n            method: 'GET',\r\n            url : `${this.server}/after`,\r\n            withCredentials: true,\r\n            timeout : 7500\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                return response.data;\r\n            }\r\n        }).catch(err => {\r\n            if(err?.response?.data?.error) return {type: \"error\", msg : err.response.data.error}\r\n            else return {type: \"error\", msg : \"네트워크 연결을 확인해주세요.\"}\r\n        })\r\n    } // get\r\n    // 저장\r\n    async set(productID) {\r\n        return await axios({\r\n            method : 'POST',\r\n            url : `${this.server}/after`,\r\n            data: {productID},\r\n            withCredentials: true,\r\n            timeout: 5500\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                return {type: \"success\"}\r\n            } else {\r\n                return {type: \"error\", msg : response.data.error}\r\n            }\r\n        }).catch(err => {\r\n            if(err?.response?.data?.error) return {type: \"error\", msg : err.response.data.error}\r\n            else return {type: \"error\", msg : \"네트워크 연결을 확인해주세요.\"}\r\n        })\r\n    } // set\r\n\r\n    // 삭제\r\n    async remove(productID) {\r\n        return await axios({\r\n            method: 'DELETE',\r\n            url : `${this.server}/after`,\r\n            data: {productID},\r\n            withCredentials: true,\r\n            timeout : 5500\r\n        }).then(response => {\r\n            if(response.status === 200) return true;\r\n            else return false;\r\n        }).catch(() => {\r\n            return false;\r\n        })\r\n    }\r\n} // AfterProduct class\r\nexport default AfterProduct;\r\n\r\n/*\r\n{\r\n    _id : String,   \r\n    upwd : String,\r\n    product : {\r\n        praw : {\r\n            domain : String,\r\n            code : String,\r\n            full : String\r\n        },\r\n        info : {\r\n            sname : String,\r\n            pname : String,\r\n            subtype : String\r\n        }\r\n    }\r\n}\r\n*/","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProductRouter.js",["247","248"],"import { useContext, useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport AfterProductModule from '../contents/js/AfterProduct';\r\n\r\n// Css\r\nimport '../contents/css/Router/AfterProduct.css';\r\n\r\n// Context \r\nimport {LoginContext ,ServerContext} from '../App';\r\n\r\nlet afterProductModule = null;\r\nconst AfterProduct = ({history}) => {\r\n\r\n    // Context\r\n    const {userInfo} = useContext(LoginContext);\r\n    const server = useContext(ServerContext);\r\n\r\n    // State\r\n    const [loader, setLoader] = useState(true);\r\n    const [deleteOption, setDeleteOption] = useState(false);\r\n    const [afterList, setAfterList] = useState(null);\r\n\r\n    // Ref\r\n    const listRef = useRef(null)\r\n    if(!userInfo || !userInfo._id || !userInfo.name) {\r\n        history.replace(\"/wrong\");\r\n    }\r\n    const request = {\r\n        getAfterList : async () => {\r\n            if(!afterProductModule) afterProductModule = new AfterProductModule(server);\r\n            const response = await afterProductModule.get();\r\n            setLoader(false);\r\n            if(response?.type === 'error') {\r\n                window.alert(response?.msg);\r\n            } else {\r\n                setAfterList(response);\r\n            }\r\n        },\r\n        removeAfterList : async (productID, target) => {\r\n            if(!afterProductModule) afterProductModule = new AfterProductModule(server);\r\n            const response = await afterProductModule.remove(productID);\r\n            if(response) {\r\n                for(let i=0; i<4; ++i) {\r\n                    if(target.nodeName === \"LI\") break;\r\n                    else target = target.parentElement;\r\n                }\r\n                if(target.nodeName !== \"LI\") return;\r\n                target.classList.add(\"remove\");\r\n                setTimeout(() => {target.style.display = 'none'},360);\r\n            } else {\r\n                window.alert(\"잠시 후 다시 시도해주세요.\");\r\n            }\r\n        }\r\n    }\r\n    const event = {\r\n        removeToggle : function() {\r\n            setDeleteOption(!deleteOption);\r\n            listRef.current?.classList.toggle(\"on\");\r\n        }, // removeToggle\r\n        moveCompare : function(element) {\r\n            if(deleteOption) this.removeToggle();\r\n            else {\r\n                history.push({\r\n                    pathname: \"/view/compare\",\r\n                    state : {\r\n                        productData : element\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(afterList === null) request.getAfterList();\r\n    }, []);\r\n    return (\r\n        <section id=\"After\">\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>나중에 볼 상품</h1>\r\n                <p>최대 50개 저장됩니다.</p>\r\n                <p>(50개 초과시 오래된 순서로 자동삭제됩니다.)</p>\r\n            </header>\r\n            <article>\r\n                <div className=\"func-btn-wrapper\">\r\n                    <button onClick={() => event.removeToggle()} className={deleteOption ? 'on' : ''}>\r\n                        <p>{deleteOption ? \"저장\" : \"삭제\"}</p>\r\n                    </button>\r\n                </div>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loaderFrame\">\r\n                                <div className=\"loader\"></div>\r\n                            </div>\r\n                        ) : (\r\n                            (afterList && afterList[0]) ? (\r\n                                <ul ref={listRef}>\r\n                                    {\r\n                                      afterList.map((element, index) => (\r\n                                            <li key={index}>\r\n                                                <div>\r\n                                                    <div className=\"info-frame\" onClick={() => event.moveCompare(element)}>\r\n                                                        <div className=\"title\">\r\n                                                            <p>{element.info.sname}</p>\r\n                                                            <h1>{element.info.pname}</h1>\r\n                                                        </div>\r\n                                                        <p>{element.info.subtype}</p>\r\n                                                    </div>\r\n                                                    <a href={`http://${element.praw.full}`}><i className=\"material-icons\">open_in_new</i></a>\r\n                                                </div>\r\n                                                <button onClick={(e) => request.removeAfterList(element._id, e.target)} className={deleteOption ? \"active\" : \"\"}>\r\n                                                    <i className=\"material-icons\">remove</i>\r\n                                                </button>\r\n                                            </li>\r\n                                        ))\r\n                                }\r\n                                </ul>\r\n                            ) : (\r\n                                <div className=\"After-none\">\r\n                                    <p>나중에 볼 상품이 없습니다.</p>\r\n                                </div>       \r\n                            )\r\n                        )\r\n                    }\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n/*\r\n    Data Format\r\n    [\r\n        {\r\n            pcode : \"PAAA0001\", -- 0\r\n            sname : \"string\", -- 1\r\n            pname : \"string\", -- 2\r\n            subtype : \"string\", -- 3\r\n            praw : {\r\n                full : \"string\", -- 0\r\n                code : \"string\" -- 1\r\n            } -- 4\r\n            \r\n        }, ...\r\n    ]\r\n*/\r\nexport default AfterProduct;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Account.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\DateFormat.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_Main.js",["249","250","251"],"import axios from 'axios';\r\nimport DateFormatModule from '../../contents/js/DateFormat';\r\n// CSS\r\nimport '../../contents/css/Event/Event_List.css';\r\n\r\n// Context\r\nimport {ServerContext} from '../../App';\r\nimport EventList from './Event_List';\r\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\n\r\nconst TestData = [\r\n    {\r\n        sname : \"906Studio\",\r\n        date : \"Thu Aug 12 2021 17:26:03 GMT+0900 (한국 표준시)\",\r\n        image : \"http://mayblue.jpg3.kr/product/marketing/roll/main_roll_banner_p09.jpg\",\r\n        type : \"free\",\r\n        url : \"https://906studio.co.kr/\"\r\n    },\r\n    {\r\n        sname : \"메이블루\",\r\n        date : \"Thu Aug 13 2021 17:26:03 GMT+0900 (한국 표준시)\",\r\n        image : \"http://mayblue.jpg3.kr/product/marketing/roll/main_roll_banner_p09.jpg\",\r\n        type : \"discount\",\r\n        url : \"http://mayblue.co.kr/\"\r\n    },\r\n    {\r\n        sname : \"메이블루\",\r\n        date : \"Thu Aug 14 2021 17:26:03 GMT+0900 (한국 표준시)\",\r\n        image : \"http://mayblue.jpg3.kr/product/marketing/roll/main_roll_banner_p09.jpg\",\r\n        type : \"coupon\",\r\n        url : \"http://mayblue.co.kr/\"\r\n    }\r\n]\r\nconst EventMain = ({history}) => {\r\n    // State\r\n    const [_option, _setOption] = useState('all');\r\n    const [_promotionArrays, _setPromotionArrays] = useState([...TestData]);\r\n    const [_eventArrays, _setEventArrays] = useState([]);\r\n    // Ref\r\n    const optionFrameRef = useRef(null);\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n\r\n    // Field\r\n    const eventCateArray = [\r\n        [\"free\",\"무료배송\"],\r\n        [\"discount\",\"할인\"],\r\n        [\"coupon\", \"쿠폰\"],\r\n        [\"saving\", \"적립\"]\r\n    ];\r\n    const getEvent = useCallback(async (option, count) => {\r\n        await axios({\r\n            method : 'GET',\r\n            url : `${server}/event/${option}/${count}`,\r\n            withCredentials: true,\r\n            timeout: 7500\r\n        }).then(response => {\r\n\r\n        }).catch(err => {\r\n            \r\n        })\r\n    }, [server]);\r\n    const event = {\r\n        optionSelect : function(option, target) {\r\n            if(_option === option) return;\r\n            if(optionFrameRef.current !== null) {\r\n                optionFrameRef.current.classList.remove(\"active\");\r\n            }\r\n            target.classList.add(\"active\");\r\n            optionFrameRef.current = target;\r\n            _setOption(option);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        /* getEvent(_option,0); */\r\n    }, [_option, getEvent]);\r\n    return (\r\n        <section id=\"Event\">\r\n            <header>\r\n                <div className=\"title\">\r\n                    <h1>진행중인 이벤트</h1>\r\n                </div>\r\n                <button onClick={() => history.goBack()}>\r\n                    <i className=\"material-icons\">arrow_back</i>\r\n                </button>\r\n            </header>\r\n            <ul>\r\n                <li onClick={(e) => event.optionSelect(\"all\", e.target)} className=\"active\" ref={optionFrameRef}>전체</li>\r\n                {\r\n                    eventCateArray.map((element,index) => (\r\n                        <li key={index} onClick={(e) => event.optionSelect(element[0], e.target)}>{element[1]}</li>\r\n                    ))\r\n                }\r\n            </ul>\r\n            <article>\r\n                {\r\n                    _promotionArrays.length > 0 ? (\r\n                        <section className=\"promotion\">\r\n                            <div className=\"title\">\r\n                                <h2>프로모션</h2>\r\n                            </div>\r\n                            <ul>\r\n                                {\r\n                                    TestData.map((element, index) => (\r\n                                        <li key={index}>\r\n                                            <a href={element.url}>\r\n                                                <div className=\"info\">\r\n                                                    <div>\r\n                                                        <h3>{element.sname}</h3>\r\n                                                        <EventType type={element.type} />\r\n                                                    </div>\r\n                                                    <p>{DateFormatModule.eventDay(element.date)}</p>\r\n                                                </div>\r\n                                                <img src={element.image} alt={index} />\r\n                                            </a>\r\n                                        </li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                        </section>\r\n                    ) : null\r\n                }\r\n                <section>\r\n                    <div className=\"title\">\r\n                        <h2>진행중인 이벤트</h2>\r\n                    </div>\r\n                    {\r\n                        _eventArrays.length > 0 ? (\r\n                            <ul></ul>\r\n                        ) : (\r\n                            <div className=\"none\">\r\n                                <i className=\"material-icons\">sentiment_neutral</i>\r\n                                <p>진행중인 이벤트가 없어요..</p>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </section>\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst EventType = ({type}) => {\r\n    switch (type) {\r\n        case \"discount\": {\r\n            return (\r\n                <p style={{backgroundColor: \"#FE4F12\"}}>할인</p>\r\n            )\r\n        }\r\n        case \"free\" : {\r\n            return (\r\n                <p style={{backgroundColor: \"#E61050\"}}>무료배송</p>\r\n            )\r\n        }\r\n        case \"coupon\" : {\r\n            return (\r\n                <p style={{backgroundColor: \"#C11EFC\"}}>쿠폰</p>\r\n            )\r\n        }\r\n        case \"saving\" : {\r\n            return (\r\n                <p style={{backgroundColor: \"#00966B\"}}>적립</p>\r\n            )\r\n        }\r\n        default: {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventMain;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_List.js",["252","253","254","255","256","257","258","259"],"import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Context\r\nimport { ServerContext } from \"../../App\";\r\n\r\nconst EventList = () => {\r\n    // State\r\n    const [_option, _setOption] = useState('all');\r\n    const [_eventArrays, _setEventArrays] = useState([]);\r\n\r\n    // Ref\r\n    const optionFrameRef = useRef(null);\r\n\r\n    // Context\r\n    const server = useContext(ServerContext);\r\n\r\n    // Field\r\n    const eventCateArray = [\r\n        [\"free\",\"무료배송\"],\r\n        [\"discount\",\"할인\"],\r\n        [\"coupon\", \"쿠폰\"],\r\n        [\"saving\", \"적립\"]\r\n    ];\r\n\r\n    \r\n    const event = {\r\n        optionSelect : function(option, target) {\r\n            if(_option === option) return;\r\n            if(optionFrameRef.current !== null) {\r\n                optionFrameRef.current.classList.remove(\"active\");\r\n            }\r\n            target.classList.add(\"active\");\r\n            optionFrameRef.current = target;\r\n            _setOption(option);\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n        \r\n    return null;\r\n}\r\n\r\nexport default EventList;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\env.js",[],{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":69,"column":8,"nodeType":"266","endLine":69,"endColumn":23,"suggestions":"267"},{"ruleId":"260","replacedBy":"268"},{"ruleId":"262","replacedBy":"269"},{"ruleId":"270","severity":1,"message":"271","line":35,"column":13,"nodeType":"272","messageId":"273","endLine":35,"endColumn":17},{"ruleId":"264","severity":1,"message":"274","line":37,"column":66,"nodeType":"266","endLine":37,"endColumn":68,"suggestions":"275"},{"ruleId":"264","severity":1,"message":"276","line":148,"column":30,"nodeType":"277","endLine":148,"endColumn":93},{"ruleId":"264","severity":1,"message":"278","line":47,"column":7,"nodeType":"266","endLine":47,"endColumn":13,"suggestions":"279"},{"ruleId":"270","severity":1,"message":"280","line":20,"column":8,"nodeType":"272","messageId":"273","endLine":20,"endColumn":15},{"ruleId":"270","severity":1,"message":"281","line":21,"column":8,"nodeType":"272","messageId":"273","endLine":21,"endColumn":15},{"ruleId":"270","severity":1,"message":"282","line":1,"column":28,"nodeType":"272","messageId":"273","endLine":1,"endColumn":37},{"ruleId":"270","severity":1,"message":"283","line":1,"column":39,"nodeType":"272","messageId":"273","endLine":1,"endColumn":45},{"ruleId":"284","severity":1,"message":"285","line":12,"column":5,"nodeType":"286","messageId":"287","endLine":58,"endColumn":6},{"ruleId":"264","severity":1,"message":"288","line":172,"column":8,"nodeType":"266","endLine":172,"endColumn":10,"suggestions":"289"},{"ruleId":"264","severity":1,"message":"290","line":203,"column":8,"nodeType":"266","endLine":203,"endColumn":17,"suggestions":"291"},{"ruleId":"292","severity":1,"message":"293","line":128,"column":21,"nodeType":"294","endLine":128,"endColumn":51},{"ruleId":"292","severity":1,"message":"293","line":165,"column":21,"nodeType":"294","endLine":165,"endColumn":51},{"ruleId":"264","severity":1,"message":"295","line":119,"column":8,"nodeType":"266","endLine":119,"endColumn":10,"suggestions":"296"},{"ruleId":"292","severity":1,"message":"293","line":143,"column":25,"nodeType":"294","endLine":143,"endColumn":29},{"ruleId":"264","severity":1,"message":"297","line":162,"column":8,"nodeType":"266","endLine":162,"endColumn":10,"suggestions":"298"},{"ruleId":"292","severity":1,"message":"293","line":24,"column":21,"nodeType":"294","endLine":24,"endColumn":51},{"ruleId":"292","severity":1,"message":"293","line":72,"column":21,"nodeType":"294","endLine":72,"endColumn":51},{"ruleId":"264","severity":1,"message":"299","line":66,"column":8,"nodeType":"266","endLine":66,"endColumn":10,"suggestions":"300"},{"ruleId":"270","severity":1,"message":"301","line":2,"column":8,"nodeType":"272","messageId":"273","endLine":2,"endColumn":18},{"ruleId":"270","severity":1,"message":"302","line":2,"column":8,"nodeType":"272","messageId":"273","endLine":2,"endColumn":13},{"ruleId":"264","severity":1,"message":"303","line":74,"column":8,"nodeType":"266","endLine":74,"endColumn":10,"suggestions":"304"},{"ruleId":"270","severity":1,"message":"305","line":8,"column":8,"nodeType":"272","messageId":"273","endLine":8,"endColumn":17},{"ruleId":"270","severity":1,"message":"306","line":37,"column":30,"nodeType":"272","messageId":"273","endLine":37,"endColumn":49},{"ruleId":"270","severity":1,"message":"307","line":38,"column":26,"nodeType":"272","messageId":"273","endLine":38,"endColumn":41},{"ruleId":"270","severity":1,"message":"308","line":1,"column":10,"nodeType":"272","messageId":"273","endLine":1,"endColumn":21},{"ruleId":"270","severity":1,"message":"282","line":1,"column":35,"nodeType":"272","messageId":"273","endLine":1,"endColumn":44},{"ruleId":"270","severity":1,"message":"302","line":2,"column":8,"nodeType":"272","messageId":"273","endLine":2,"endColumn":13},{"ruleId":"270","severity":1,"message":"309","line":10,"column":12,"nodeType":"272","messageId":"273","endLine":10,"endColumn":24},{"ruleId":"270","severity":1,"message":"307","line":10,"column":26,"nodeType":"272","messageId":"273","endLine":10,"endColumn":41},{"ruleId":"270","severity":1,"message":"310","line":16,"column":11,"nodeType":"272","messageId":"273","endLine":16,"endColumn":17},{"ruleId":"270","severity":1,"message":"311","line":19,"column":11,"nodeType":"272","messageId":"273","endLine":19,"endColumn":25},{"ruleId":"270","severity":1,"message":"312","line":27,"column":11,"nodeType":"272","messageId":"273","endLine":27,"endColumn":16},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array. Outer scope values like 'accountModule' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["315"],["313"],["314"],"no-unused-vars","'test' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'setCookies'. Either include it or remove the dependency array.",["316"],"Assignments to the 'gender' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: '__fetchSearchData'. Either include it or remove the dependency array.",["317"],"'Sample1' is defined but never used.","'Sample2' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'data' and 'event'. Either include them or remove the dependency array.",["318"],"React Hook useEffect has missing dependencies: 'data.praw.full' and 'data.size.name'. Either include them or remove the dependency array.",["319"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has missing dependencies: '__data.info.ptype' and '__data.info.subtype'. Either include them or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: '__data.size'. Either include it or remove the dependency array.",["321"],"React Hook useEffect has missing dependencies: 'getProduct' and 'productData'. Either include them or remove the dependency array.",["322"],"'StatusCode' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'afterList' and 'request'. Either include them or remove the dependency array.",["323"],"'EventList' is defined but never used.","'_setPromotionArrays' is assigned a value but never used.","'_setEventArrays' is assigned a value but never used.","'useCallback' is defined but never used.","'_eventArrays' is assigned a value but never used.","'server' is assigned a value but never used.","'eventCateArray' is assigned a value but never used.","'event' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},"Update the dependencies array to be: [userInfo]",{"range":"342","text":"343"},"Update the dependencies array to be: [setCookies]",{"range":"344","text":"345"},"Update the dependencies array to be: [__fetchSearchData, praw]",{"range":"346","text":"347"},"Update the dependencies array to be: [data, event]",{"range":"348","text":"349"},"Update the dependencies array to be: [data.praw.full, data.size.name, product]",{"range":"350","text":"351"},"Update the dependencies array to be: [__data.info.ptype, __data.info.subtype]",{"range":"352","text":"353"},"Update the dependencies array to be: [__data.size]",{"range":"354","text":"355"},"Update the dependencies array to be: [getProduct, productData]",{"range":"356","text":"357"},"Update the dependencies array to be: [afterList, request]",{"range":"358","text":"359"},[2087,2102],"[userInfo]",[3792,3794],"[setCookies]",[1530,1536],"[__fetchSearchData, praw]",[6826,6828],"[data, event]",[8232,8241],"[data.praw.full, data.size.name, product]",[4780,4782],"[__data.info.ptype, __data.info.subtype]",[6699,6701],"[__data.size]",[2151,2153],"[getProduct, productData]",[2554,2556],"[afterList, request]"]