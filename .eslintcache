[{"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js":"1","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js":"2","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js":"3","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View.js":"4","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Login.js":"5","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js":"6","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\MyProductData.js":"7","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js":"8","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Cookie.js":"9","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProduct.js":"10","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js":"11","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js":"12","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProduct.js":"13","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js":"14","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js":"15","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\AccountHelp.js":"16","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js":"17","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js":"18","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js":"19","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js":"20","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js":"21","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js":"22","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js":"23","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js":"24","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Compare.js":"25","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Main.js":"26","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Article.js":"27","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Graph.js":"28","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Menu.js":"29","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Nav_MyProduct.js":"30","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\EventRouter.js":"31","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_List.js":"32","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Error\\NonLogin.js":"33","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\AddProduct.js":"34","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\ViewProduct.js":"35","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step.js":"36"},{"size":433,"mtime":1611675300050,"results":"37","hashOfConfig":"38"},{"size":4040,"mtime":1615803043316,"results":"39","hashOfConfig":"38"},{"size":557,"mtime":1611802791864,"results":"40","hashOfConfig":"38"},{"size":3318,"mtime":1615481085051,"results":"41","hashOfConfig":"38"},{"size":3070,"mtime":1615626973975,"results":"42","hashOfConfig":"38"},{"size":2271,"mtime":1615382137096,"results":"43","hashOfConfig":"38"},{"size":12223,"mtime":1614782694973,"results":"44","hashOfConfig":"38"},{"size":4151,"mtime":1615482975782,"results":"45","hashOfConfig":"38"},{"size":2215,"mtime":1614609719214,"results":"46","hashOfConfig":"38"},{"size":8045,"mtime":1615634795843,"results":"47","hashOfConfig":"38"},{"size":4236,"mtime":1615474026244,"results":"48","hashOfConfig":"38"},{"size":5251,"mtime":1614608725635,"results":"49","hashOfConfig":"38"},{"size":740,"mtime":1615802978299,"results":"50","hashOfConfig":"38"},{"size":7266,"mtime":1615482904100,"results":"51","hashOfConfig":"38"},{"size":12018,"mtime":1615482945660,"results":"52","hashOfConfig":"38"},{"size":147,"mtime":1615117529425,"results":"53","hashOfConfig":"38"},{"size":595,"mtime":1615118017032,"results":"54","hashOfConfig":"38"},{"size":2246,"mtime":1615787955730,"results":"55","hashOfConfig":"38"},{"size":353,"mtime":1615118863548,"results":"56","hashOfConfig":"38"},{"size":567,"mtime":1615123515483,"results":"57","hashOfConfig":"38"},{"size":505,"mtime":1615123543320,"results":"58","hashOfConfig":"38"},{"size":3334,"mtime":1615637486669,"results":"59","hashOfConfig":"38"},{"size":5697,"mtime":1615638736178,"results":"60","hashOfConfig":"38"},{"size":5999,"mtime":1615721098158,"results":"61","hashOfConfig":"38"},{"size":6181,"mtime":1615634666145,"results":"62","hashOfConfig":"38"},{"size":15927,"mtime":1615750464761,"results":"63","hashOfConfig":"38"},{"size":5502,"mtime":1615483520541,"results":"64","hashOfConfig":"38"},{"size":15449,"mtime":1615483170308,"results":"65","hashOfConfig":"38"},{"size":2146,"mtime":1615787811884,"results":"66","hashOfConfig":"38"},{"size":3451,"mtime":1615483379902,"results":"67","hashOfConfig":"38"},{"size":294,"mtime":1615773447677,"results":"68","hashOfConfig":"38"},{"size":5011,"mtime":1615786936124,"results":"69","hashOfConfig":"38"},{"size":405,"mtime":1615788547825,"results":"70","hashOfConfig":"38"},{"size":6571,"mtime":1615820152739,"results":"71","hashOfConfig":"38"},{"size":20606,"mtime":1615803526416,"results":"72","hashOfConfig":"38"},{"size":5201,"mtime":1615821416730,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"fdgu1h",{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"76"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js",[],["158","159"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js",["160","161"],"// Module\r\nimport {createContext, useEffect, useState } from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport LoginModule from './contents/js/Login';\r\nimport { CookiesProvider, useCookies } from 'react-cookie';\r\n\r\n// Font\r\nimport './contents/fonts/Montserrat_use.css';\r\nimport './contents/fonts/NotoSans.css';\r\n\r\n// Component\r\nimport View from './router/View';\r\n\r\nimport Compare from './router/Compare';\r\nimport AfterProduct from './router/AfterProduct';\r\nimport UserProduct from './router/UserProduct';\r\nimport Wrong from './router/WrongRouter';\r\nimport Search from './router/Search';\r\nimport LoginRouter from './router/LoginRouter';\r\nimport SettingRouter from './router/SettingRouter';\r\nimport NotFound from './router/NotFoundRouter';\r\nimport EventRouter from './router/EventRouter';\r\n\r\nimport NonLogin from './router/Error/NonLogin';\r\n\r\n\r\nimport Test from './router/Test';\r\n\r\n// CSS\r\nimport './contents/css/Alert.css';\r\nimport './contents/css/Error.css';\r\n\r\n// Context\r\nexport const MediaContext = createContext(\"Phone\");\r\nexport const LoginContext = createContext(null);\r\n\r\nlet login = null;\r\nconst App = () => {\r\n    const [media, setMedia] = useState(\"Phone\");\r\n    const [{sizelity_user}, setCookie, removeCookie] = useCookies(\"sizelity_user\");\r\n    const [userInfo, setUserInfo] = useState(sizelity_user ? sizelity_user._id ? sizelity_user : null : null);\r\n\r\n    //const __userInfo = useMemo(() => {}, [sizelity_user._id]);\r\n    // autoLogin\r\n    useEffect(() => {\r\n        if(sizelity_user && sizelity_user._id) {\r\n            \r\n            console.log(\"%c Auto login check...\", \"background: red; color:#fff;\")\r\n\r\n            if(!login) login = new LoginModule();\r\n            ( async () => {\r\n                const a_l = await login.send({_id : sizelity_user._id, upwd : sizelity_user.sili_p});\r\n                if(a_l === true) {\r\n                    setUserInfo(sizelity_user);\r\n                } else {\r\n                    // 잘못된 정보의 Cookie 를 갖고 있기에 삭제\r\n                    console.log(\"Delete User Auto Login Information\")\r\n                    removeCookie(\"sizelity_user\");\r\n                }\r\n            })();\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if(userInfo !== null) setCookie(\"sizelity_user\",userInfo,{path:\"/\",maxAge:(500 * 24 * 60 * 60)})\r\n    }, [userInfo]);\r\n\r\n    useEffect(() => {\r\n        setMedia(window.screen.width > 1024 ? \"Desktops\" : \"Phone\");\r\n    }, []);\r\n    \r\n    return (\r\n        <CookiesProvider>\r\n            <LoginContext.Provider value={{userInfo, setUserInfo}}>\r\n                <MediaContext.Provider value={media}>\r\n                    <BrowserRouter>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={View} />\r\n                            <Route exact path=\"/compare\" component={Compare} />\r\n                            <Route exact path=\"/view/compare\" component={Compare} />\r\n                            <Route exact path=\"/search\" component={Search} />\r\n                            <Route exact path=\"/after\" component={AfterProduct} />\r\n                            <Route exact path=\"/event\" component={EventRouter} />\r\n\r\n                            <Route path=\"/closet\" component={UserProduct} />\r\n                            <Route path=\"/login\" component={LoginRouter} />\r\n                            <Route path=\"/setting\" component={SettingRouter} />\r\n                            \r\n                            <Route exact path={\"/test\"} component={Test}/>\r\n                            \r\n                            \r\n                            <Route exact path=\"/notlogin\" component={NonLogin} />\r\n                            <Route exact path=\"/error\" component={Wrong} />\r\n                            <Route path=\"/\" component={NotFound}/>\r\n                        </Switch>\r\n                    </BrowserRouter>\r\n                </MediaContext.Provider>\r\n            </LoginContext.Provider>\r\n        </CookiesProvider>\r\n    );\r\n}\r\nexport default App;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js",[],["162","163"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Login.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\MyProductData.js",[],["164","165"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Cookie.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProduct.js",["166"],"import { useContext, useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Css\r\nimport '../contents/css/Router/AfterProduct.css';\r\n\r\n// Context \r\nimport {LoginContext}from '../App';\r\n\r\n\r\nconst AfterProduct = ({history}) => {\r\n    // Context\r\n    const {userInfo} = useContext(LoginContext);\r\n    // State\r\n    const [loader, setLoader] = useState(true);\r\n    const [deleteOption, setDeleteOption] = useState(false);\r\n    const [afterList, setAfterList] = useState(null);\r\n\r\n    // Ref\r\n    const reomveWrapper = useRef(null);\r\n    console.log(userInfo);\r\n    if(userInfo === null) {\r\n        history.replace(\"/wrong\");\r\n    } else if(!userInfo || !userInfo._id || !userInfo.sili_p || !userInfo.name) {\r\n        history.replace(\"/wrong\");\r\n    }\r\n    \r\n    const request = {\r\n        getAfterList : async () => {\r\n            if(!userInfo || !userInfo._id || !userInfo.sili_p) return;\r\n            const result = await axios({\r\n                method: 'post',\r\n                url : 'http://192.168.11.2:3001/user/getafter',\r\n                data : {\r\n                    _id : userInfo._id,\r\n                    upwd : userInfo.sili_p\r\n                },\r\n                timeout : 5000\r\n            });\r\n            console.log(\"요청 결과\", {_id : userInfo._id, upwd: userInfo.sili_p});\r\n            console.log(\"요청 결과 정보\",result.data);\r\n            setLoader(false);\r\n            try {\r\n                if(result.data) {\r\n                    setAfterList(result.data);\r\n                } else {\r\n                    setAfterList(null);\r\n                }\r\n            } catch(error) {\r\n                alert(\"error\");\r\n                console.log(\"error\");\r\n                setAfterList(null);\r\n            }\r\n        },\r\n        removeAfterList : async (data) => {\r\n            const result = await axios({\r\n                method: 'post',\r\n                url : 'http://localhost:3001/user/removeafter',\r\n                data : data,\r\n                timeout : 4000\r\n            });\r\n            console.log(\"삭제 결과 : \",result);\r\n        }\r\n\r\n    }\r\n    const event = {\r\n        removeToggle : () => {\r\n            if(!deleteOption) setDeleteOption(true);\r\n            else event.removeComfirmToggle(true);\r\n        },\r\n        removeCancel : () => {\r\n            event.removeComfirmToggle(false);\r\n            setDeleteOption(false)\r\n        },\r\n        moveCompare : (element) => {\r\n            history.push({\r\n                pathname: \"/view/compare\",\r\n                search: `?shop=${element.praw.domain}&no=${element.praw.code}`\r\n            });\r\n        },\r\n        removeData : {\r\n            _id : userInfo && userInfo._id ? userInfo._id : null,\r\n            upwd : userInfo && userInfo.sili_p ? userInfo.sili_p : null,\r\n            product : [\"asdfsaf\"]\r\n        },\r\n        count : 0,\r\n        remove : (_id, e) => {\r\n            e.stopPropagation();\r\n            let target = e.target;\r\n            let i = 0;\r\n            while(!(target.classList.contains(\"After-element\")) && i < 5) {\r\n                target = target.parentElement;\r\n                i++;\r\n            }\r\n            if(i === 4 && !target.classList.contains(\"After-element\")) return;\r\n            else {\r\n                target.classList.add(\"remove\");\r\n                setTimeout(() => target.remove(),360);\r\n            }\r\n            event.removeData.product.push(_id);\r\n            event.count++;\r\n        },\r\n        removeSend : async () => {\r\n            console.log(\"삭제할 데이터 : \", event.removeData);\r\n            await request.removeAfterList(event.removeData);\r\n            event.removeComfirmToggle(false);\r\n            setDeleteOption(false);\r\n        },\r\n        removeComfirmToggle : (force) => {\r\n            if(!reomveWrapper.current) return;\r\n            if(force === undefined) force =  !reomveWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(event.count > 0) reomveWrapper.current.classList.add(\"on\");\r\n                else setDeleteOption(false);\r\n            } else if(!force) reomveWrapper.current.classList.remove(\"on\");\r\n            \r\n        }\r\n    }\r\n    useEffect(() => {\r\n        request.getAfterList();\r\n    }, []);\r\n    return (\r\n        <section id=\"After\">\r\n            <div className=\"remove-wrapper\" ref={reomveWrapper}>\r\n                <div className=\"msg\">\r\n                    <h1 style={{color:\"#ff0000\"}}>\"삭제\"</h1>\r\n                    <h1>하시겠습니까?</h1>\r\n                </div>\r\n                <div className=\"confirm\">\r\n                    <div style={{borderRight:\"1px solid #dbdbdb\"}} onClick={() => event.removeSend()}>\r\n                        <p>삭제</p>\r\n                    </div>\r\n                    <div onClick={() => event.removeCancel()}>\r\n                        <p>취소 </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>나중에 볼 상품</h1>\r\n                <p>최대 30개 저장</p>\r\n                <p>(30개 초과시 오래된 순서로 자동삭제됩니다)</p>\r\n            </header>\r\n            <article>\r\n                <div className=\"func-btn-wrapper\">\r\n                    <button className={deleteOption ? \"on\" : \"\"} onClick={() => event.removeToggle()}>{deleteOption ? \"저장\" : \"삭제\"}</button>\r\n                </div>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loaderFrame\">\r\n                                <div className=\"loader\"></div>\r\n                            </div>\r\n                        ) : (\r\n                            (afterList && afterList[0]) ? (\r\n                                <ul>\r\n                                    {\r\n                                      afterList.map((element, index) => (\r\n                                            <li key={index} className=\"After-element\">\r\n                                                <div className=\"After-elementInfoFrame\" onClick={() => event.moveCompare(element)}>\r\n                                                    <div className=\"After-elementInfo\">\r\n                                                        <input type=\"hidden\" name=\"pcode\"/>\r\n                                                        <p>{element.info.sname}</p>\r\n                                                        <h1>{element.info.pname}</h1>\r\n                                                    </div>\r\n                                                    <p>{element.info.subtype}</p>\r\n                                                </div>\r\n                                                <a href={`http://${element.praw.full}`}><i className=\"material-icons\">open_in_new</i></a>\r\n                                                <button onClick={(e) => event.remove(element._id,e)} className={deleteOption ? \"active\" : \"\"}>\r\n                                                    <i className=\"material-icons\">remove</i>\r\n                                                </button>\r\n                                            </li>\r\n                                        ))\r\n                                }\r\n                                </ul>\r\n                            ) : (\r\n                                <div className=\"After-none\">\r\n                                    <p>나중에 볼 상품이 없습니다.</p>\r\n                                </div>       \r\n                            )\r\n                        )\r\n                    }\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n/*\r\n    Data Format\r\n    [\r\n        {\r\n            pcode : \"PAAA0001\", -- 0\r\n            sname : \"string\", -- 1\r\n            pname : \"string\", -- 2\r\n            subtype : \"string\", -- 3\r\n            praw : {\r\n                full : \"string\", -- 0\r\n                code : \"string\" -- 1\r\n            } -- 4\r\n            \r\n        }, ...\r\n    ]\r\n*/\r\nexport default AfterProduct;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js",["167","168"],"import { useEffect } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport SizelityURL from '../contents/js/URL';\r\n\r\nconst Test = ({history}) => {\r\n    const sampleCase = [\r\n        \"https://www.byslim.com/product/%EB%8B%B9%EC%9D%BC%EB%B0%9C%EC%86%A1-%EC%BD%94%EB%94%94%EB%A7%8C%EB%8A%A5-%EA%B8%B4%ED%8C%94%ED%8B%B0mu/19486/category/1/display/6/\",\r\n        \"https://byslim.com/product/%EC%BD%94%ED%8C%85-%ED%97%A4%EB%B9%84-%ED%8A%B8%EB%9F%AC%EC%BB%A4%EC%88%8F%EC%9E%AC%ED%82%B7ot/23644/category/683/display/1/\",\r\n        \"https://byslim.com/product/%ED%8A%B8%EC%9C%8C%EC%8A%A4%ED%8A%B8%EB%A6%BF-%EC%B9%B4%EA%B3%A0-%EC%A1%B0%EA%B1%B0%EB%B0%B4%EB%94%A9%EB%B0%94%EC%A7%80/23627/category/683/display/1/\",\r\n        \"https://www.hiver.co.kr/products/28508426\", // products\r\n        \"https://www.w3schools.com/cssref/css_selectors.asp\",\r\n        \"https://www.hiver.co.kr/products/28549822\", \r\n        \"https://mr-s.co.kr/product/%EA%B3%A0%ED%85%90-%ED%8A%B8%EB%A0%8C%EC%B9%98-%EB%A1%B1%EC%BD%94%ED%8A%B8/39702/category/1/display/13/\",\r\n        \"https://mr-s.co.kr/product/11-%EB%8D%B0%EC%9D%B4-%EC%99%80%EC%9D%B4%EB%93%9C-%ED%8A%B8%EB%A0%88%EC%9D%B4%EB%8B%9D-%EC%85%8B%EC%97%85/39672/category/1/display/2/\",\r\n        \"https://www.zardins.com/product/detail.html?product_no=4518&cate_no=1&display_group=4\", // product_no\r\n        \"https://www.zardins.com/product/detail.html?product_no=5212&cate_no=1&display_group=3\",\r\n        \"http://superstari.co.kr/shop/shopdetail.html?branduid=142447&xcode=044&mcode=001&scode=&special=3&GfDT=bmp8W10%3D\", // branduid\r\n        \"http://www.okkane.co.kr/shop/shopdetail.html?branduid=132910&xcode=102&mcode=000&scode=&special=1&GfDT=bml0W10%3D\",\r\n        \"http://www.okkane.co.kr/shop/shopdetail.html?branduid=129768&xcode=101&mcode=000&scode=&special=1&GfDT=Zm93UFw%3D\",\r\n        \"https://www.meosidda.com/product/%EB%88%84%EA%B5%AC%EB%82%98-%ED%8E%B8%ED%95%98%EA%B2%8C-%EC%A6%90%EA%B2%A8%EC%9E%85%EB%8A%94-%EB%AC%B4%EC%A7%80%EB%A7%A8%ED%88%AC%EB%A7%A8/30969/category/1/display/2/\", // product\r\n        \"https://www.meosidda.com/product/%EB%8D%B0%EC%9D%BC%EB%A6%AC-%EB%A9%B4%EC%8A%A4%ED%8C%90-%EC%B9%B4%EA%B3%A0-%EC%A1%B0%EA%B1%B0%ED%8C%AC%EC%B8%A0/37335/category/1/display/2/\",\r\n        \"http://lookple.com/product/%EB%A3%A9-%EB%8D%B0%EC%9D%B4%ED%94%84-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98-%EB%9D%BC%EC%9A%B4%EB%93%9C%EB%8B%88%ED%8A%B8/4452/category/1/display/3/\",\r\n        \"http://zoozoom.co.kr/shop/shopdetail.html?branduid=164011&xcode=008&mcode=001&scode=&GfDT=Z253UA%3D%3D\",\r\n        \"https://blog.naver.com/guswjd0407/222250474168\",\r\n        \"https://fn3995.tistory.com/128\",\r\n        \"https://hub.zum.com/daily/42307\",\r\n        \"https://yongmat.tistory.com/244?category=735709\",\r\n        \"https://smartstore.naver.com/cookierun/products/5346983325\",\r\n        \"https://smartstore.naver.com/kdgbook/products/5375407225?NaPm=ct%3Dklgwsn8w%7Cci%3D551c6b90ffff31118e8408efa716e5c254c71479%7Ctr%3Dslsl%7Csn%3D531617%7Chk%3D060e0352d7339f3444dab6d0d84af39f268e016e\",\r\n        \"https://m.blog.naver.com/yoorican/221281164058\",\r\n        \"https://m.blog.naver.com/PostView.nhn?blogId=star76a&logNo=220096989645&proxyReferer=https:%2F%2Fwww.google.com%2F\",\r\n        \"https://sanglae.tistory.com/m/209\",\r\n        \"https://www.loveparis.net/product/new20000%EC%9B%90%ED%95%A0%EC%9D%B8-223%ED%99%94%EB%B6%80%ED%84%B0-%EC%A0%95%EC%83%81%EA%B0%80169000%EC%9B%90%EC%9B%A8%EC%9D%B4%EB%B8%8C-%EB%B2%84%ED%8A%BC-%EB%A0%88%EB%8D%94%EC%9E%90%EC%BC%93/16011/category/1/display/3&cafe_mkt=nms_c02?NaPm=ct%3Dklgww3h4%7Cci%3Dd5d8ff715a1d19ced2a05baddbacda62b6bf0f96%7Ctr%3Dwsp%7Csn%3D19686%7Chk%3D4e2e2db88bb98ca6a327ae7ccaca813e7da6174a\"\r\n    ];\r\n    const [{test},setCookies] = useCookies([]);\r\n    \r\n    useEffect(() => {setCookies(\"test\",{test:\"테스트\"},{path:\"/\"})},[]);\r\n    const cookieTest = () => {\r\n        setCookies(\"test\",{test:\"5678\"},{path:\"/\"});\r\n    }\r\n    const url = new SizelityURL();\r\n    for(const element of sampleCase) {\r\n        console.log(url.get(element));\r\n    }\r\n    return (\r\n        <>\r\n            <button onClick={() => history.goBack()}>뒤로가기</button>\r\n            <button onClick={() => cookieTest()}>Cookie Test</button>\r\n        </>\r\n    )\r\n}\r\nexport default Test;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js",["169"],"import { Link } from 'react-router-dom';\r\nimport { useContext, useEffect, useRef } from 'react';\r\n\r\n// JS\r\nimport LoginModule from '../../contents/js/Login';\r\n\r\n// CSS\r\nimport '../../contents/css/Login/Login.css';\r\n\r\n// Context\r\nimport {LoginContext} from '../../App';\r\nlet loginModule = null;\r\nlet loginObject = {uid:undefined, upwd:undefined};\r\nconst ViewLogin = ({history}) => {\r\n    const alertWrapper = useRef(null);\r\n    const alertText = useRef(null);\r\n    let submitBtn = null;\r\n\r\n    const email = useRef(null);\r\n    const pwd = useRef(null);\r\n\r\n    const {userInfo, setUserInfo} = useContext(LoginContext);\r\n    console.log(userInfo);\r\n    useEffect(() => {\r\n        if(userInfo && userInfo._id) {\r\n            // 로그인 되어있음.\r\n            history.replace(\"/wrong\");\r\n        }\r\n    }, []);\r\n    const alertMessage = {\r\n        NetWorkError : \"네트워크 오류\",\r\n        WrongError : \"이메일 또는 비밀번호를 확인해주세요.\",\r\n        ServerError : \"잠시 후 시도해주세요.\"\r\n    }   \r\n\r\n    const login = {\r\n        loginEvent : async (e) => {\r\n            const __id = email.current.value;\r\n            const toggleWrong = (target, force) => target.current.classList.toggle(\"wrong\",force);\r\n            const isEmail = ((value) => {\r\n                return (/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n            })(__id);\r\n            if(isEmail) toggleWrong(email,false);\r\n            else {\r\n                toggleWrong(email,true);\r\n                return false;\r\n            }\r\n            const __password = pwd.current.value;\r\n            const isPwd = ((value) => {\r\n                return (/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(value);\r\n            })(__password);\r\n            if(isPwd) toggleWrong(pwd,false);\r\n            else {\r\n                toggleWrong(pwd,true);\r\n                return false;\r\n            }\r\n\r\n            if(!loginModule) loginModule = new LoginModule();\r\n            loginObject.uid = __id;\r\n            loginObject.upwd = __password;\r\n\r\n\r\n            event.disabled(true, e.target);\r\n            const result = await loginModule.send(loginObject);\r\n            if(!email.current) return; // 페이지 벗어남.\r\n\r\n            if(result.name) {\r\n                setUserInfo(result);\r\n                history.goBack();\r\n            } else {\r\n                // 로그인 실패\r\n                if(result === false) {\r\n                    // 서버로의 전송 전 데이터 검증 과정에서 걸 림.\r\n                    /*\r\n                        - 발생 요인\r\n                        1. 프런트 코딩 단계 : Component 에서 Login 라이브러리로 전송하는 데이터의 형식을 봐야할 듯.\r\n                    */\r\n                   event.openAlert(alertMessage.NetWorkError);\r\n                } else if(result.status) {\r\n                    switch(result.status) {\r\n                        case -200 : {\r\n                            // 서버와의 통신중에 문제가 생김\r\n                            event.openAlert(alertMessage.ServerError);\r\n                            break;\r\n                        }\r\n                        case -404 : {\r\n                            // 서버에 형식에 맞지않는 데이터를 전송\r\n                            /*\r\n                                - 발생 요인\r\n                                1. 프런트 코딩단계 : 서버에서 처리하는 데이터와 프런트의 데이터 형식을 맞추지 않고 처리했는지 확인\r\n                                2. 백엔드 코딩단계 : 서버에서의 처리과정 중 일치하지 않는 데이터를 처리하는지 확인\r\n                                3. 보안단계 : 악의적인 코드 주입을 통한 일치 하지 않는 데이터 주입\r\n                                        -> 서버 전송 전 데이터 검증 과정을 거치나, 1,2번 문제가 아닌 경우 우회적으로 데이터 주입.\r\n                             */\r\n                            event.openAlert(alertMessage.ServerError);\r\n                            break;\r\n                        }\r\n                        case 404 : {\r\n                            event.openAlert(alertMessage.WrongError);\r\n                            break;\r\n                        }\r\n                        default : {\r\n                            event.openAlert(alertMessage.ServerError);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const event = {\r\n        closeAlert : function() {\r\n            if(!alertWrapper.current) return;\r\n            alertWrapper.current.classList.remove(\"on\");\r\n        },\r\n        openAlert : function(Msg) {\r\n            this.setText(Msg);\r\n            if(!alertWrapper.current) return;\r\n            this.disabled(false)\r\n            alertWrapper.current.classList.add(\"on\");\r\n        },\r\n        setText : function(Msg) {\r\n            console.log(Msg);\r\n            if(!alertText) return;\r\n            alertText.current.innerHTML = Msg;\r\n        },\r\n        disabled : function(force, submit) {\r\n            if(!alertWrapper.current) return;\r\n            alertWrapper.current.classList.toggle(\"ready\",force);\r\n            if(!submitBtn) submitBtn = submit;\r\n            submitBtn.disabled = force;\r\n            email.current.disabled = force;\r\n            pwd.current.disabled = force;\r\n        }\r\n    }\r\n    return (\r\n        <section id=\"View-login\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <p ref={alertText}></p>\r\n                </div>\r\n                <div className=\"blank\" onTouchStart={() => event.closeAlert()}></div>\r\n            </div>\r\n            <div className=\"Login-backFrame\" onClick={() => history.goBack()}>\r\n                <i className=\"material-icons\">arrow_back</i>\r\n            </div>\r\n            <article>\r\n                <form id=\"loginForm\">\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"email\" ref={email} className=\"user-input\" id=\"user-input-id\" placeholder=\"이메일\" />\r\n                        <input type=\"password\" ref={pwd} className=\"user-input\" id=\"user-input-password\" placeholder=\"비밀번호\" />\r\n                    </div>\r\n                </form>\r\n                <div className=\"submit-wrapper\">\r\n                    <button id=\"submit-btn\" onClick={(e) => login.loginEvent(e)}>로그인</button>\r\n                </div>\r\n                <div className=\"login-option-wrapper\">\r\n                    <Link id=\"join-btn\" to=\"/login/join\">\r\n                        <h4>계정이 없으신가요?</h4>\r\n                        <h2>회원가입</h2>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"line\"><div></div></div>\r\n                <div className=\"login-option-wrapper\">\r\n                    <Link to=\"/login/accounthelp\">\r\n                        <h4>비밀번호를 잊으셨나요?</h4>\r\n                    </Link>\r\n                </div>\r\n            </article>\r\n            <footer>\r\n\r\n            </footer>\r\n        </section>\r\n    )\r\n}\r\nexport default ViewLogin;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js",["170","171"],"import axios from 'axios';\r\nimport { useEffect, useRef } from 'react';\r\nimport '../../contents/css/Login/Join.css';\r\nconst URL = \"http://localhost:3001/user/signup\"; // Local\r\n//const URL = \"http://172.30.1.31:3001/user/signup\"; // Cafe\r\n//const URL = \"http://192.168.11.2:3001/user/signup\"; // Home\r\n\r\n\r\nconst Join = ({history}) => {\r\n    // Ref\r\n    const resultWrapper = useRef(null); // \"환영합니다.\"\r\n    const alertWrapper = useRef(null);  // 상단 알림\r\n\r\n    const email = useRef(null);\r\n    const pwd = useRef(null);\r\n    const rePwd = useRef(null);\r\n    const name = useRef(null);\r\n\r\n    let gender = null;\r\n    let genderSelect = 'not';\r\n    let privacy = null;\r\n\r\n    const event = {\r\n        submitEvent : () => {\r\n            if(!checkRule()) return false;\r\n            const account = {\r\n                uid : email.current.value,\r\n                upwd : pwd.current.value,\r\n                name : name.current.value,\r\n                gender : genderSelect,\r\n                privacy : true,\r\n                alert : privacy[2].checked\r\n            }\r\n            console.log(account);\r\n            \r\n            // SUBMIT\r\n            ( async () => {\r\n                try {\r\n                    resultWrapper.current.classList.add(\"on\");\r\n                    const result = await axios({\r\n                        method : 'post',\r\n                        url : URL,\r\n                        data : account,\r\n                        timeout : 3000\r\n                    });\r\n                    console.log(\"응답 결과 : \", result.data);\r\n                    switch(result.data.status) {\r\n                        case 200 : {\r\n                            // Success\r\n                            resultWrapper.current.querySelector('.result-frame').classList.add(\"on\");\r\n                            setTimeout(() => {\r\n                                history.replace('/view/login');\r\n                            }, 1500);\r\n                            break;   \r\n                        }\r\n                        case 0 : {\r\n                            // already Email\r\n                            event.alertToggle(true, \"이미 가입된 이메일 입니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        case -404 : {\r\n                            // invalid Data\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        case -200 : {\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\\n 잠시뒤 다시 시도해주세요.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        default : {\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                        }\r\n                    }\r\n                } catch {\r\n                    event.alertToggle(true, \"네트워크 연결을 확인해주세요.\");\r\n                    resultWrapper.current.classList.remove(\"on\");\r\n                }\r\n            })();\r\n\r\n        }, // submitEvent()\r\n        genderChange : () => {\r\n            if(gender) {\r\n                for(const element of gender) {\r\n                    if(element.checked) {\r\n                        element.parentElement.classList.add(\"on\");\r\n                        genderSelect = element.value;\r\n                    } else {\r\n                        element.parentElement.classList.remove(\"on\");\r\n                    }\r\n                }\r\n            }\r\n        }, // genderChange\r\n\r\n        privacyEvent : (e) => {\r\n            const target = e.target;\r\n            if(target.checked) target.parentElement.classList.add(\"on\");\r\n            else target.parentElement.classList.remove(\"on\");\r\n        }, // Privacy Event\r\n\r\n        alertToggle : (force, msg) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contain('on');\r\n            if(msg) alertWrapper.current.querySelector(\"p\").innerHTML = msg;\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        } // alertToggle\r\n    }\r\n    const checkRule = () => {\r\n        // Check\r\n        const toggleWrong = (target, force) => target.current.classList.toggle(\"wrong\",force);\r\n        const isEmail = ((value) => {\r\n            return (/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n        })(email.current.value);\r\n        if(isEmail) toggleWrong(email,false);\r\n        else {\r\n            toggleWrong(email,true);\r\n            return false;\r\n        }\r\n\r\n        const isPwd = ((value) => {\r\n            return (/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(value);\r\n        })(pwd.current.value);\r\n        if(isPwd) toggleWrong(pwd,false);\r\n        else {\r\n            toggleWrong(pwd,true);\r\n            return false;\r\n        }\r\n        const isRePwd = (pwd.current.value === rePwd.current.value);\r\n        if(isRePwd) toggleWrong(rePwd,false);\r\n        else { \r\n            toggleWrong(rePwd,true);\r\n            return false;\r\n        }\r\n\r\n        const isName = ((value) => {\r\n            return (value.length > 1 && value.length < 25)\r\n        })(name.current.value);\r\n        if(isName) toggleWrong(name,false);\r\n        else {\r\n            toggleWrong(name,true);\r\n            return false;\r\n        }\r\n\r\n        if(privacy) {\r\n            if(privacy[0].checked && privacy[1].checked) {\r\n                return true;\r\n            } else {\r\n                alert(\"필수 약관에 동의해주세요.\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(!gender) gender = document.querySelectorAll('input[type=\"radio\"][name=\"gender\"]');\r\n        if(!privacy) privacy = document.querySelectorAll('.privacy-wrapper input[type=\"checkbox\"]');\r\n    }, []);\r\n    return (\r\n        <section id=\"View-Join\">\r\n            <div className=\"result-wrapper\" ref={resultWrapper}>\r\n                <div className=\"loader-frame\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n                <div className=\"result-frame\">\r\n                    <h1>환영합니다</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\"><p></p></div>\r\n                <div className=\"blank\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <header>\r\n                <div className=\"Login-backFrame\" onClick={() => history.goBack()}>\r\n                    <i className=\"material-icons\">arrow_back</i>\r\n                </div>\r\n                <h2>회원가입</h2>\r\n            </header>\r\n            <article className=\"bottom\">\r\n                <form>\r\n                    <div style={{flexGrow : 1}}>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>로그인 정보</h1>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"email\" placeholder=\"이메일 (E-Mail)\" ref={email} autoComplete=\"off\" id=\"input-email\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"password\" placeholder=\"비밀번호 (Password)\" ref={pwd} id=\"input-password\" minLength=\"8\" maxLength=\"25\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"password\" placeholder=\"비밀번호 확인 (Re-Password)\" ref={rePwd} id=\"input-re-password\" minLength=\"8\" maxLength=\"25\"/>\r\n                            </li>\r\n                            <p>영문 대소문자, 숫자, 특수문자 포함 8~20자</p>\r\n                        </ul>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>개인정보</h1>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"text\" placeholder=\"이름\" id=\"input-first\" ref={name} autoComplete=\"off\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <label>\r\n                                    <p>남자</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"male\" onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                                <label>\r\n                                    <p>여자</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"female\" onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                                <label className=\"on\">\r\n                                    <p>비공개</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"not\" defaultChecked onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                            </li>\r\n                        </ul>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>약관</h1>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>사이즈리티 서비스 이용약관 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>개인정보 수집 및 이용동의 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>프로모션 안내 메일 수신동의 (선택)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"submit-wrapper\">\r\n                        <button type=\"button\" onClick={() => event.submitEvent()}>가입하기</button>\r\n                    </div>\r\n                </form>\r\n            </article>\r\n        </section>\r\n    );\r\n}\r\nexport default Join;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\AccountHelp.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Compare.js",["172"],"import axios from 'axios';\r\nimport React, {createContext, useMemo, useEffect, useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\nimport URLModule from '../contents/js/URL';\r\n\r\n// CSS\r\nimport '../contents/css/Compare/Compare_Router.css';\r\n// Component\r\nimport Main from '../components/Compare/Compare_Main';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Context\r\nexport const ProductContext = createContext(null);\r\n\r\nlet urlModule = null;\r\nconst Compare = ({history, location}) => {\r\n    if(!urlModule) {\r\n        console.log(\"URL 모듈 생성\");\r\n        urlModule = new URLModule();\r\n    }\r\n\r\n    // Cookie\r\n    const [{sizelity_currentSearchData}, setCookies] = useCookies([]);\r\n\r\n    const referrer = document.referrer;\r\n    // Test Code\r\n    // const referrer = \"m.mr-s.co.kr/product/%EB%A1%9C%EC%9D%B8-%EB%A9%94%EC%A2%85-%EB%B8%8C%EC%9D%B4%EB%84%A5-%EB%8B%88%ED%8A%B8/39581\";\r\n    const u = referrer ? urlModule.get(referrer) : null;\r\n    \r\n    // State\r\n    const [loader, setLoader] = useState(true);\r\n    const [productURL] = useState(\r\n        u ? referrer : history.location.state ? history.location.state.data.praw.full : null\r\n    );\r\n    const [data, setData] = useState(history.location.state ? history.location.state.data : null);\r\n    const [status, setStatus] = useState(0);\r\n\r\n\r\n    // location.search 데이터 : sizelity?shop=...&no=... 로 전달될 수 있음.\r\n    const isLocation = useMemo(() => {\r\n        if(productURL) return false;\r\n        try {\r\n            const params = new URLSearchParams(location.search);\r\n            return (params.has('shop') && params.has('no'));\r\n        } catch{return false}\r\n    }, [productURL, location.search]);\r\n    \r\n\r\n    useEffect(() => { \r\n        const getProduct = async (query) => {\r\n            try {\r\n                const response = await axios({\r\n                    method: \"get\",\r\n                    url : `http://192.168.11.2:3001/product/get${query}`,\r\n                    timeout : 6000\r\n                }).catch(() => {\r\n                    console.log(\"TIMEOUT\");\r\n                    return {data:{status:-200}};\r\n                });\r\n                console.log(\"검색 결과 : \", response);\r\n                if(response.data._id) {\r\n                    // 데이터 가져오기 성공.\r\n                    try {\r\n                        // 최근 검색 상품 쿠키에 넣기\r\n                        const sname = response.data.info.sname;\r\n                        const pname = response.data.info.pname;\r\n                        let isSame = false;\r\n    \r\n                        let current = sizelity_currentSearchData;\r\n                        if(current) {\r\n                            for(const element of current) {\r\n                                if(element[0] === sname && element[1] === pname) {\r\n                                    isSame = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            current = new Array([]);\r\n                        }\r\n                        if(!isSame) {\r\n                            if(current.length > 20) current.pop();\r\n                            current.unshift([ response.data.info.sname, response.data.info.pname, response.data.info.subtype, response.data.praw.full]);\r\n                            setCookies(\"sizelity_currentSearchData\",current,{path:\"/\", maxAge:(500 * 24 * 60 * 60)});\r\n                        }\r\n                    } catch{} finally {\r\n                        setData(response.data);\r\n                    }\r\n                    \r\n                } else {\r\n                    if(response.data.status) setStatus(response.data.status);\r\n                }\r\n            } catch(error) {\r\n                console.error(error);\r\n            }   \r\n            setLoader(false);\r\n        }\r\n        if((data === null && productURL !== null) || isLocation) {\r\n            const query = isLocation ? location.search : `shop=${u.domain}&no=${u.code}`;\r\n            getProduct(query);\r\n        }\r\n    }, [productURL]);\r\n\r\n    return (\r\n        loader ? (\r\n            <section id=\"Compare\">\r\n                <div className=\"loader\" style={{\r\n                    border: \"2px solid #888888\",\r\n                    borderTop:\"2px solid #00000000\",\r\n                    width:\"2rem\",\r\n                    height:\"2rem\"\r\n                }}></div>\r\n            </section>\r\n        ) : (\r\n            data ? (\r\n                <ProductContext.Provider value={data}>\r\n                    <Main \r\n                        history={history}\r\n                        productData={data}\r\n                    />\r\n                </ProductContext.Provider>\r\n            ) : (\r\n                <section id=\"Compare\">\r\n                    {\r\n                        status === -404 ? (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>죄송합니다.</h1>\r\n                                <h1>상품 정보가 없습니다.</h1>\r\n                                <p>입력하신 상품의 사이즈 정보는</p>\r\n                                <p>영업일 기준 2일이내에 자동으로 입력됩니다.</p>\r\n                            </div>\r\n                        ) : status === -200 ? (\r\n                            <div className=\"title\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <h1>죄송합니다.</h1>\r\n                                <h1>서버와의 연결에 실패했습니다.</h1>\r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                기타\r\n                            </div>\r\n                        )\r\n                    }\r\n                    <footer>\r\n                        <Link to=\"/\">Sizelity</Link>\r\n                    </footer>\r\n                </section>\r\n            )\r\n        )\r\n    )\r\n}\r\n\r\n//export default React.memo(Compare);\r\nexport default Compare;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Main.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Article.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Graph.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Menu.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Compare\\Compare_Nav_MyProduct.js",["173"],"import React, {useContext, useEffect, useRef} from 'react';\r\nimport Proptype from 'prop-types';\r\nimport Transition from '../../contents/js/TransitionSizeName';\r\n\r\n// CSS\r\nimport '../../contents/css/MyProductNav.css';\r\n\r\n// Context\r\nimport { MediaContext } from '../../App';\r\n\r\n/*\r\n    @param myProductData : 현재 나의 옷 정보가 담긴 Object (in Cookie \"my_recently\")\r\n    @param setMyProductData : 현재 나의 옷 정보가 담긴 Object state 를 변경하는 함수\r\n*/\r\nlet transition = null;\r\nconst NavMyProduct = ({myProductData, history}) => {\r\n    // Context\r\n    const media = useContext(MediaContext);\r\n\r\n    // ref\r\n    const nav = useRef(null);\r\n    \r\n    if(!transition) transition = new Transition(\"KOR\");\r\n\r\n    const event = {\r\n        navToggle : function(force) {\r\n            if(nav.current) {\r\n                if(force === undefined) force = !(nav.current.classList.contains(\"active\"));\r\n                nav.current.classList.toggle(\"active\", force);\r\n            }\r\n        },\r\n        moveCloset : function() {\r\n            if(nav.current.classList.contains(\"active\")) {\r\n                history.push({\r\n                    pathname : \"/closet\",\r\n                    state : {\r\n                        isCompare : true\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    } // event\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => { event.navToggle(true); }, 300)\r\n    }, [myProductData]);\r\n    return (\r\n        <div id=\"myProduct-nav-wrapper\" className=\"\" ref={nav}>\r\n            {\r\n                media === \"Phone\" ?\r\n                <div className=\"navCloser\"  onTouchStart={() => event.navToggle()}></div> : \r\n                <div className=\"navCloser\"  onClick={() => event.navToggle()}></div> \r\n            }\r\n            <nav className=\"myProductNav\" onClick={() => event.navToggle(true)}>\r\n            {\r\n                myProductData ? (\r\n                    <>\r\n                        <div className=\"size\">\r\n                            <p>{myProductData.size.name}</p>\r\n                        </div>\r\n                        <div className=\"info\">\r\n                            <p>{myProductData.info.sname ? myProductData.info.sname : null}</p>\r\n                            <h1>{myProductData.info.nick ? myProductData.info.nick : myProductData.info.pname ? myProductData.info.pname : null}</h1>\r\n                            <div>\r\n                                <p>{transition.getCate(myProductData.info.ptype)}</p>\r\n                                <b>/</b>\r\n                                <p>{myProductData.info.subtype ? myProductData.info.subtype : null}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"changeBtn\">\r\n                            <i className='material-icons' onClick={() => event.moveCloset(true)}>swap_horiz</i>\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    \r\n                        <button onClick={() => event.moveCloset(false)}>\r\n                            <i className=\"material-icons\">add</i>\r\n                            <p>나의 옷을 골라주세요.</p>\r\n                        </button>\r\n                )\r\n            }\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavMyProduct.proptype = {\r\n    myProductData : Proptype.object,\r\n    history : Proptype.object.isRequired\r\n}\r\n\r\nexport default React.memo(NavMyProduct);","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\EventRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Event\\Event_List.js",["174","175"],"import axios from 'axios';\r\nimport { set } from 'lodash';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n// CSS\r\nimport '../../contents/css/Event/Event_List.css';\r\n\r\n\r\nconst EventList = ({history}) => {\r\n    // state\r\n    const [list, setList] = useState(undefined);\r\n    \r\n    // ref\r\n    const caution = useRef(null);\r\n\r\n    const getDay = (start, end) => Math.floor((new Date(start).getTime() - new Date(end).getTime()) / (1000 * 60 * 60 * 24)) * -1;\r\n\r\n    if(list) console.log(list);\r\n\r\n    const event = {\r\n        cautionToggle : (force) => {\r\n            if(!caution.current) return;\r\n            if(force === undefined) force = !caution.current.classList.contains(\"on\");\r\n            caution.current.classList.toggle(\"on\",force);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetch = async() => {\r\n            const response = await axios({\r\n                method: \"post\",\r\n                url : \"http://localhost:3001/event/get\",\r\n                data : {\r\n                    cate : \"all\"\r\n                },\r\n                timeout : 3500\r\n            }).catch(err => {\r\n                console.log(\"Evnet Get Timeout : \", err);\r\n                event.cautionToggle(true);\r\n                return {data:{status:-200}}\r\n            });\r\n            if(response.data.status) {\r\n                console.log(\"Error : \", response.data.status);\r\n                setList(null);\r\n            } else {\r\n                setList(response.data);\r\n            }\r\n        }\r\n        fetch();\r\n    }, []);\r\n    return (\r\n        <section id=\"List\">\r\n            <div className=\"caution-wrapper\" ref={caution}>\r\n                <div className=\"caution-frame\">\r\n                    <p>잠시 후 시도해주세요.</p>\r\n                </div>\r\n                <div className=\"caution-closer\" onClick={() => event.cautionToggle(false)}></div>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => history.goBack()}>\r\n                    <i className=\"material-icons\">arrow_back</i>\r\n                </button>\r\n            </div>\r\n            <header>\r\n                <div>\r\n                    <h1>이벤트</h1>\r\n                    <p></p>\r\n                </div>\r\n            </header>\r\n            <article>\r\n                {\r\n                    (list && list.slizelity && list.sizelity.length > 0) ? (\r\n                        <div className=\"list-wrapper\">\r\n                            <div className=\"title-frame\">\r\n                                <h1>진행중인 이벤트</h1>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n                <div className=\"list-wrapper\">\r\n                    <div className=\"title-frame\">\r\n                        <h1>프로모션</h1>\r\n                    </div>\r\n                    {\r\n                        (list && list.shop && list.shop.length > 0) ? (\r\n                            <ul> {\r\n                                list.shop.map((element, index) => (\r\n                                    <li key={index}>\r\n                                        <a href={element.link}>\r\n                                            <div className=\"list-title\">\r\n                                                <h1>{element.sname}</h1>\r\n                                                <div className=\"list-d\">\r\n                                                    <h2>{getDay(element.expires.start, element.expires.end)}</h2>\r\n                                                    <p>일 남음</p>\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            <div className=\"list-img\">\r\n\r\n                                            </div>\r\n                                            <div className=\"list-tag-frame\">\r\n                                                {element.tag.map((tagName, index) => (\r\n                                                    <p key={index}>#{tagName}</p>\r\n                                                ))}\r\n                                            </div>\r\n                                        </a>\r\n                                    </li>\r\n                                ))\r\n                            }</ul>\r\n                        ) : list === null ? (\r\n                            <div className=\"list-none\">\r\n                                <i className=\"material-icons\">sentiment_very_dissatisfied</i>\r\n                                <p>진행중인 프로모션이 없습니다.</p>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"list-none\">\r\n                                <div className=\"loader\"></div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n            </article>\r\n            <footer>\r\n\r\n            </footer>\r\n        </section>\r\n    )\r\n}\r\nexport default EventList;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Error\\NonLogin.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\AddProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\ViewProduct.js",["176"],"import { useContext, useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport Transition from '../../contents/js/TransitionSizeName';\r\n\r\n// CSS\r\nimport '../../contents/css/UserProduct/ViewProduct.css';\r\nimport '../../contents/css/MyProductNav.css';\r\n\r\n// Context\r\nimport { MediaContext } from '../../App';\r\nimport { LoginContext } from '../../App';\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet transition = null;\r\nconst URL = \"http://192.168.11.2:3001/user/getproduct\";\r\n//const URL = \"http://localhost:3001/user/getproduct\";\r\nconst UserProduct = ({history}) => {\r\n    const backIsCompare = history.location.state ? history.location.state.isCompare : false;\r\n    //const comparePtype = history.location.state ? history.location.state.ptype : null; -> \r\n\r\n    // Cookie\r\n    const [{sizelity_myRecently}, setCookie] = useCookies(['sizelity_myRecently']);\r\n    const cookie = sizelity_myRecently;\r\n\r\n    // Context\r\n    const { userInfo } = useContext(LoginContext);\r\n    const media = useContext(MediaContext);\r\n    \r\n    \r\n    // State\r\n    const [productData, setProductData] = useState(null);\r\n\r\n    // Ref\r\n    const alertWrapper = useRef(null);\r\n    const confirmWrapper = useRef(null);\r\n    const deleteBtn = useRef(null);\r\n    const modifyBtn = useRef(null);\r\n\r\n    // Field\r\n    if(!transition) transition = new Transition(\"KOR\");\r\n    const cate = [\"set\",\"outer\",\"top\",\"bottom\"]; // 지원 항목\r\n    let mode = 1; // -1 : delete mode / 0 : modify mode / 1 : cookie change mode\r\n    let removeData = {\r\n        product : null,\r\n        frame : null\r\n    };\r\n    \r\n    // Analyze ProductData\r\n    const analyzeData = ((data) => {\r\n        if(!data || data.length < 1) return null;\r\n        else {\r\n            const result = {};\r\n            for(const element of data) {\r\n                if(element.info.ptype) {\r\n                    if(!result[element.info.ptype]) result[element.info.ptype] = [];\r\n                    result[element.info.ptype].push(element);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    })(productData);\r\n    console.log(\"분석 결과 : \", analyzeData);\r\n    const event = {\r\n        listToggle : (e, force) => {\r\n            if(!e) return;\r\n            e.stopPropagation();\r\n            //const frame = e.target.parentElement.classList.conatain(\"list-frame\") ? e.target.parentElement : null;\r\n            let frame = e.target;\r\n            for(let i = 0; i<4; i++) {\r\n                frame = frame.parentElement;\r\n                if(frame.classList.contains(\"list-frame\")) break;\r\n            }\r\n            if(force === undefined) force = !frame.classList.contains(\"on\");\r\n            frame.classList.toggle(\"on\",force);\r\n            \r\n        },\r\n        elementClick : (data, e) => {\r\n            e.stopPropagation();\r\n            console.log(mode);\r\n            switch(mode) {\r\n                case 1 : {\r\n                    setCookie(\"sizelity_myRecently\",data,{path:\"/\", maxAge:(500 * 24 * 60 * 60)});\r\n                    break;\r\n                }\r\n                case 0 : {\r\n                    history.push({\r\n                        pathname: '/closet/add',\r\n                        state: data\r\n                    })\r\n                    break;\r\n                }\r\n                case -1 : {\r\n                    let frame = e.target;\r\n                    if(!frame.classList.contains(\"list\")) {\r\n                        for(let i=0; i < 5; i++) {\r\n                            frame = frame.parentElement;\r\n                            if(frame.classList.contains(\"list\")) break;\r\n                        }\r\n                    }\r\n                    if(!frame.classList.contains(\"list\")) return;\r\n                    removeData.product = data;\r\n                    removeData.frame = frame;\r\n                    alert.confirmToggle(true, data, \"error\");\r\n                    break;\r\n                }\r\n                default : {}\r\n            }\r\n        },\r\n        delete : {\r\n            mode : (force) => {\r\n                if(!deleteBtn.current) return;\r\n                if(force === undefined) force = !deleteBtn.current.classList.contains(\"on\");\r\n                if(force) {\r\n                    if(mode === 0) {\r\n                        // Delete mode 활성화 상태 -> 종료 해줘야함.\r\n                        if(!modifyBtn.current) return;\r\n                        modifyBtn.current.classList.remove(\"on\");\r\n                    }\r\n                    deleteBtn.current.classList.add(\"on\");\r\n                    alert.alertToggle(true,\"삭제모드 : 삭제하려는 상품을 선택해주세요.\",\"error\");\r\n                    mode = -1\r\n                } else {\r\n                    deleteBtn.current.classList.remove(\"on\");\r\n                    alert.alertToggle(true,\"삭제모드를 종료합니다.\",\"error\");\r\n                    mode = 1\r\n                }\r\n            }\r\n        },\r\n        deleteCancel : () => {\r\n            removeData.frame = null;\r\n            removeData.product = null;\r\n            alert.confirmToggle(false);\r\n        },\r\n        elementDelete : async () => {\r\n            alert.confirmToggle(false);\r\n            if(removeData.product) { //Confirm 오픈시 저장되는 데이터 (Field - let removeData = null;)\r\n                const response = await axios({\r\n                    method : 'post',\r\n                    url : \"http://localhost:3001/user/removeproduct\",\r\n                    data : {\r\n                        _id : userInfo._id,\r\n                        upwd : userInfo.sili_p,\r\n                        product : {\r\n                            _id : removeData.product._id\r\n                        }\r\n                    },\r\n                    timeout: 3500\r\n                }).catch(() => {\r\n                    return {data : {status : -100}};\r\n                });\r\n                if(!response || !response.data || !response.status) {\r\n                    alert.alertToggle(true, \"오류가 발생했습니다.\", \"error\");\r\n                }\r\n                switch(response.data.status) {\r\n                    case 200 : {\r\n                        if(removeData.frame) removeData.frame.classList.add(\"remove\");\r\n                        break;\r\n                    }\r\n                    case -1 : {\r\n                        alert.alertToggle(true,\"잘못된 접근입니다.\",\"error\");\r\n                        break;\r\n                    }\r\n                    case -100 : {\r\n                        alert.alertToggle(true, \"네트워크 오류!\", \"error\");\r\n                        break;\r\n                    }\r\n                    case -200 : {\r\n                        alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                        break;\r\n                    }\r\n                    default : {\r\n                        alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                    }\r\n                }\r\n            } else {\r\n                alert.alertToggle(true,\"실패하였습니다.\",\"error\");\r\n            }\r\n        },\r\n        modify : {\r\n            mode : (force) => {\r\n                if(!modifyBtn.current) return;\r\n                if(force === undefined) force = !modifyBtn.current.classList.contains(\"on\");\r\n                if(force) {\r\n                    if(mode === -1) {\r\n                        // Delete mode 활성화 상태 -> 종료 해줘야함.\r\n                        if(!deleteBtn.current) return;\r\n                        deleteBtn.current.classList.remove(\"on\");\r\n                    }\r\n                    modifyBtn.current.classList.add(\"on\");\r\n                    alert.alertToggle(true,\"수정모드 : 수정하려는 상품을 선택해주세요.\",\"normal\");\r\n                    mode = 0;\r\n                } else {\r\n                    modifyBtn.current.classList.remove(\"on\");\r\n                    alert.alertToggle(true,\"수정모드를 종료합니다.\",\"normal\");\r\n                    mode = 1\r\n                }\r\n            },\r\n            click : () => {\r\n                \r\n            }\r\n        }\r\n    }\r\n    const alert = {\r\n        // type : error || normal || clear\r\n        alertToggle : (force, msg, type) => {\r\n            if(!alertWrapper.current) return;\r\n            const cl = alertWrapper.current.classList;\r\n            if(force === undefined) force = !cl.contains(\"on\");\r\n            if(force === true) {\r\n                if(msg !== undefined) {\r\n                    if(type === \"error\" || type === \"normal\" || type === \"clear\") {\r\n                        const title = alertWrapper.current.querySelector(\"p\");\r\n                        if(title) {\r\n                            title.innerHTML = msg;\r\n                            title.classList.remove(\"error\", \"normal\", \"clear\");\r\n                            title.classList.add(type);\r\n                        }\r\n                    }\r\n                }\r\n                cl.add(\"on\");\r\n            } else {\r\n                cl.remove(\"on\");\r\n            }\r\n        },\r\n        confirmToggle : (force, data, type) => {\r\n            if(!confirmWrapper.current) return;\r\n            const cl = confirmWrapper.current.classList;\r\n            if(force === undefined) force = !cl.contains(\"on\");\r\n            if(force === true) {\r\n                if(data !== undefined) {\r\n                    if(type === \"error\" || type === \"normal\" || type === \"clear\") {\r\n                        const title = confirmWrapper.current.querySelector(\"q\");\r\n                        if(title) {\r\n                            title.innerHTML = data.info.nick ? data.info.nick : data.info.pname ? data.info.pname : null;\r\n                            title.classList.remove(\"error\", \"normal\", \"clear\");\r\n                            title.classList.add(type);\r\n                        }\r\n                    }\r\n                }\r\n                cl.add(\"on\");\r\n            } else {\r\n                cl.remove(\"on\");\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(!userInfo) return;\r\n        console.log(\"%c Request My Fav Product Data !!\", \"background: black; color: #fff;\");\r\n        if(productData === null) {\r\n            try {\r\n                (async () => {\r\n                    if(userInfo._id && userInfo.sili_p) {\r\n                        const response = await axios({\r\n                            method: 'post',\r\n                            url: URL,\r\n                            data : {\r\n                                _id : userInfo._id,\r\n                                upwd : userInfo.sili_p\r\n                            },\r\n                            timeout: 3500\r\n                        }).catch(() => {\r\n                            console.log(\"ERROR\");\r\n                            alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                            return;\r\n                        });\r\n                        if(response && response.data) {\r\n                            console.log(\"%c SERVER GET USER PRODUCT DATA : \", \"background: black; color: #fff;\", response.data);\r\n                            setProductData(response.data);\r\n                        } else return;\r\n                    } else {\r\n                        console.log(\"%c Request fail\", \"background: black; color: #fff;\");\r\n                        return null;\r\n                    }\r\n                })();\r\n            } catch {\r\n                alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n            }\r\n        }\r\n    }, [productData, userInfo]);\r\n    return (\r\n        <section id=\"UserProduct\">\r\n            <div className=\"alertWrapper\" ref={alertWrapper}>\r\n                <div className=\"alertFrame\">\r\n                    <p></p>\r\n                </div>\r\n                {\r\n                    media === \"Desktops\" ?\r\n                    <div className=\"alertClose\" onClick={() => alert.alertToggle(false)}></div> :\r\n                    <div className=\"alertClose\" onTouchStart={() => alert.alertToggle(false)}></div>\r\n                }\r\n            </div>\r\n            <div className=\"confirmWrapper\" ref={confirmWrapper}>\r\n                <div className=\"confirmFrame\">\r\n                    <div>\r\n                        <q></q>\r\n                        <h1>삭제하시겠습니까?</h1>\r\n                    </div>\r\n                    <ul>\r\n                        <li style={{color:\"#ff0000\"}} onClick={() => event.elementDelete()}>삭제</li>\r\n                        <li onClick={() => event.deleteCancel()}>취소</li>\r\n                    </ul>\r\n                </div>\r\n                {\r\n                    media === \"Desktops\" ?\r\n                    <div className=\"alertClose\" onClick={() => alert.confirmToggle(false)}></div> :\r\n                    <div className=\"alertClose\" onTouchStart={() => alert.confirmToggle(false)}></div>\r\n                }\r\n            </div>\r\n            <i className=\"material-icons\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <div className=\"title\">\r\n                    <h1 className=\"name\">{userInfo ? userInfo.name : \"XXX\"}</h1>\r\n                    <h1>님의 상품</h1>\r\n                </div>\r\n                <Link to=\"/closet/add\">\r\n                    <i className=\"material-icons\">add</i>\r\n                    <p>추가</p>\r\n                </Link>\r\n            </header>\r\n            <article>\r\n                {\r\n                    productData ? \r\n                        productData.length > 0 ? (\r\n                            <div className=\"list-wrapper\">\r\n                                <div className=\"list-nav\">\r\n                                    <div className=\"delete\" onClick={() => event.delete.mode((mode !== -1))} ref={deleteBtn}>\r\n                                        <i className=\"material-icons\">delete</i>\r\n                                    </div>\r\n                                    <div className=\"modify\" onClick={() => event.modify.mode((mode !== 0))} ref={modifyBtn}>\r\n                                        <i className=\"material-icons\">mode_edit</i>\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    analyzeData ? (\r\n                                        cate.map((c, i1) => {\r\n                                            if(analyzeData[c] && analyzeData[c].length > 0) {\r\n                                                return (\r\n                                                    <div key={i1} className=\"list-frame\">\r\n                                                        <div className=\"cate-nav\" onClick={(e) => event.listToggle(e)}>\r\n                                                            <p>{transition.getCate(c)}</p>\r\n                                                            <i className=\"material-icons\">keyboard_arrow_down</i>\r\n                                                        </div>\r\n                                                        <ul>\r\n                                                            {\r\n                                                                analyzeData[c].map((element, i2) => {\r\n                                                                    return (\r\n                                                                        <li key={i2} className=\"list\" onClick={(e) => event.elementClick(element, e)}>\r\n                                                                            <div className=\"size\">\r\n                                                                                <p>{element.size.name}</p>\r\n                                                                            </div>\r\n                                                                            <div className=\"info\">\r\n                                                                                <p>{element.info.sname ? element.info.sname : \"\"}</p>\r\n                                                                                <h1>{element.info.nick ? element.info.nick : element.info.pname}</h1>\r\n                                                                                {element.info.nick ? element.info.pname ? <h2>{element.info.pname}</h2> : null : null}\r\n                                                                            </div>\r\n                                                                            <div className=\"type\">\r\n                                                                                <p>{element.info.subtype}</p>\r\n                                                                            </div>\r\n                                                                            {element.praw.full ? \r\n                                                                                <div className=\"link\">\r\n                                                                                    <a href={`http://${element.praw.full}`} onClick={(e) => e.stopPropagation()}>\r\n                                                                                        <i className=\"material-icons\">open_in_new</i>\r\n                                                                                    </a>\r\n                                                                                </div> : null}\r\n                                                                            <div className=\"btn-wrapper\">\r\n\r\n                                                                            </div>\r\n                                                                        </li>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </ul>\r\n                                                    </div>\r\n                                                )\r\n                                            } else return null;\r\n                                        })\r\n                                    ) : (\r\n                                        <div></div>\r\n                                    )\r\n                                }\r\n\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"empty\">\r\n                                <i className=\"material-icons\">insert_emoticon</i>\r\n                                <p><b style={{fontWeight:\"500\"}}>{userInfo.name}님의 상품</b>을 추가해주세요.</p>\r\n                                <button onClick={() => event.add()}>추가하기</button>\r\n                            </div>\r\n                        )\r\n                     : (\r\n                        <div className=\"loaderFrame\">\r\n                            <div className=\"loader\"></div>\r\n                        </div>\r\n                    )\r\n                    }\r\n            </article>\r\n            <nav className=\"myProductNav\">\r\n                {\r\n                    cookie ? (\r\n                        <>\r\n                            <div className=\"size\">\r\n                                <p>{cookie.size.name}</p>\r\n                            </div>\r\n                            <div className=\"info\">\r\n                                <p>{cookie.info.sname ? cookie.info.sname : null}</p>\r\n                                <h1>{cookie.info.nick ? cookie.info.nick : cookie.info.pname ? cookie.info.pname : null}</h1>\r\n                                <div>\r\n                                    <p>{transition.getCate(cookie.info.ptype)}</p>\r\n                                    <b>/</b>\r\n                                    <p>{cookie.info.subtype ? cookie.info.subtype : null}</p>\r\n                                </div>\r\n                            </div>\r\n                            {\r\n                                backIsCompare ? <div className=\"changeBtn active\" onClick={() => history.goBack()}>\r\n                                    <i className=\"material-icons\">close</i>\r\n                                </div> : null\r\n                            }\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"empty\">\r\n                            <p>다른 상품과 비교할 상품을 골라주세요.</p>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n            </nav>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default UserProduct;\r\n","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\UserProduct\\Step.js",["177"],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":62,"column":8,"nodeType":"184","endLine":62,"endColumn":10,"suggestions":"185"},{"ruleId":"182","severity":1,"message":"186","line":65,"column":8,"nodeType":"184","endLine":65,"endColumn":18,"suggestions":"187"},{"ruleId":"178","replacedBy":"188"},{"ruleId":"180","replacedBy":"189"},{"ruleId":"178","replacedBy":"190"},{"ruleId":"180","replacedBy":"191"},{"ruleId":"182","severity":1,"message":"192","line":121,"column":8,"nodeType":"184","endLine":121,"endColumn":10,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":35,"column":13,"nodeType":"196","messageId":"197","endLine":35,"endColumn":17},{"ruleId":"182","severity":1,"message":"198","line":37,"column":66,"nodeType":"184","endLine":37,"endColumn":68,"suggestions":"199"},{"ruleId":"182","severity":1,"message":"200","line":29,"column":8,"nodeType":"184","endLine":29,"endColumn":10,"suggestions":"201"},{"ruleId":"182","severity":1,"message":"202","line":157,"column":30,"nodeType":"203","endLine":157,"endColumn":93},{"ruleId":"182","severity":1,"message":"204","line":158,"column":32,"nodeType":"203","endLine":158,"endColumn":100},{"ruleId":"182","severity":1,"message":"205","line":101,"column":8,"nodeType":"184","endLine":101,"endColumn":20,"suggestions":"206"},{"ruleId":"182","severity":1,"message":"207","line":46,"column":8,"nodeType":"184","endLine":46,"endColumn":23,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"209","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":13},{"ruleId":"182","severity":1,"message":"207","line":50,"column":8,"nodeType":"184","endLine":50,"endColumn":10,"suggestions":"210"},{"ruleId":"182","severity":1,"message":"211","line":280,"column":8,"nodeType":"184","endLine":280,"endColumn":31,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":52,"column":5,"nodeType":"215","messageId":"216","endLine":129,"endColumn":6},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'removeCookie' and 'sizelity_user'. Either include them or remove the dependency array.","ArrayExpression",["219"],"React Hook useEffect has a missing dependency: 'setCookie'. Either include it or remove the dependency array.",["220"],["217"],["218"],["217"],["218"],"React Hook useEffect has a missing dependency: 'request'. Either include it or remove the dependency array.",["221"],"no-unused-vars","'test' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'setCookies'. Either include it or remove the dependency array.",["222"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["223"],"Assignments to the 'gender' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'privacy' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","React Hook useEffect has missing dependencies: 'data', 'isLocation', 'location.search', 'setCookies', 'sizelity_currentSearchData', 'u.code', and 'u.domain'. Either include them or remove the dependency array.",["224"],"React Hook useEffect has a missing dependency: 'event'. Either include it or remove the dependency array.",["225"],"'set' is defined but never used.",["226"],"React Hook useEffect has a missing dependency: 'alert'. Either include it or remove the dependency array.",["227"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},"Update the dependencies array to be: [removeCookie, sizelity_user]",{"range":"246","text":"247"},"Update the dependencies array to be: [setCookie, userInfo]",{"range":"248","text":"249"},"Update the dependencies array to be: [request]",{"range":"250","text":"251"},"Update the dependencies array to be: [setCookies]",{"range":"252","text":"253"},"Update the dependencies array to be: [history, userInfo]",{"range":"254","text":"255"},"Update the dependencies array to be: [data, isLocation, location.search, productURL, setCookies, sizelity_currentSearchData, u.code, u.domain]",{"range":"256","text":"257"},"Update the dependencies array to be: [event, myProductData]",{"range":"258","text":"259"},"Update the dependencies array to be: [event]",{"range":"260","text":"261"},"Update the dependencies array to be: [alert, productData, userInfo]",{"range":"262","text":"263"},[2179,2181],"[removeCookie, sizelity_user]",[2321,2331],"[setCookie, userInfo]",[4180,4182],"[request]",[3792,3794],"[setCookies]",[793,795],"[history, userInfo]",[4027,4039],"[data, isLocation, location.search, productURL, setCookies, sizelity_currentSearchData, u.code, u.domain]",[1375,1390],"[event, myProductData]",[1522,1524],"[event]",[11250,11273],"[alert, productData, userInfo]"]