[{"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js":"1","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js":"2","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js":"3","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View.js":"4","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Login.js":"5","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js":"6","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View_Compare.js":"7","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductData.js":"8","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\MyProductData.js":"9","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js":"10","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Cookie.js":"11","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProduct.js":"12","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js":"13","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js":"14","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProduct.js":"15","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Nav_MyProduct.js":"16","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Compare.js":"17","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Menu.js":"18","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_MyProduct.js":"19","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Compare_List.js":"20","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js":"21","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js":"22","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\AccountHelp.js":"23","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js":"24","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js":"25","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js":"26","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js":"27","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js":"28","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js":"29","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js":"30","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js":"31","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Compare.js":"32","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\CompareTest2.js":"33"},{"size":433,"mtime":1611675300050,"results":"34","hashOfConfig":"35"},{"size":4113,"mtime":1615473205734,"results":"36","hashOfConfig":"35"},{"size":557,"mtime":1611802791864,"results":"37","hashOfConfig":"35"},{"size":3373,"mtime":1615471884654,"results":"38","hashOfConfig":"35"},{"size":3015,"mtime":1615362419614,"results":"39","hashOfConfig":"35"},{"size":2271,"mtime":1615382137096,"results":"40","hashOfConfig":"35"},{"size":19395,"mtime":1615397403934,"results":"41","hashOfConfig":"35"},{"size":5612,"mtime":1614607700882,"results":"42","hashOfConfig":"35"},{"size":12223,"mtime":1614782694973,"results":"43","hashOfConfig":"35"},{"size":4147,"mtime":1614750746549,"results":"44","hashOfConfig":"35"},{"size":2215,"mtime":1614609719214,"results":"45","hashOfConfig":"35"},{"size":8030,"mtime":1615365911124,"results":"46","hashOfConfig":"35"},{"size":4236,"mtime":1615474026244,"results":"47","hashOfConfig":"35"},{"size":5251,"mtime":1614608725635,"results":"48","hashOfConfig":"35"},{"size":19395,"mtime":1615471103897,"results":"49","hashOfConfig":"35"},{"size":3451,"mtime":1615471033533,"results":"50","hashOfConfig":"35"},{"size":5546,"mtime":1615478493451,"results":"51","hashOfConfig":"35"},{"size":643,"mtime":1615116142205,"results":"52","hashOfConfig":"35"},{"size":3685,"mtime":1615116142351,"results":"53","hashOfConfig":"35"},{"size":15449,"mtime":1615116141793,"results":"54","hashOfConfig":"35"},{"size":7268,"mtime":1615123940054,"results":"55","hashOfConfig":"35"},{"size":12062,"mtime":1615123772939,"results":"56","hashOfConfig":"35"},{"size":147,"mtime":1615117529425,"results":"57","hashOfConfig":"35"},{"size":595,"mtime":1615118017032,"results":"58","hashOfConfig":"35"},{"size":2243,"mtime":1615363191587,"results":"59","hashOfConfig":"35"},{"size":353,"mtime":1615118863548,"results":"60","hashOfConfig":"35"},{"size":567,"mtime":1615123515483,"results":"61","hashOfConfig":"35"},{"size":505,"mtime":1615123543320,"results":"62","hashOfConfig":"35"},{"size":1888,"mtime":1615365182487,"results":"63","hashOfConfig":"35"},{"size":5702,"mtime":1615365106919,"results":"64","hashOfConfig":"35"},{"size":6004,"mtime":1615365199224,"results":"65","hashOfConfig":"35"},{"size":2863,"mtime":1615478410874,"results":"66","hashOfConfig":"35"},{"size":509,"mtime":1615475629548,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"fdgu1h",{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\index.js",[],["142","143"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\App.js",["144","145","146"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ServiceOpen.js",[],["147","148"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Login.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\TransitionSizeName.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\View_Compare.js",["149"],"import { useCallback, useContext, useEffect, useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// CSS\r\nimport '../contents/css/View/View_Compare_Main.css';\r\n\r\n// Component\r\nimport Compare from '../components/View/View_Compare';\r\nimport NavMyProduct from '../components/View/View_Nav_MyProduct';\r\nimport Menu from '../components/View/View_Menu';\r\n\r\n// Context\r\nimport { MediaContext } from '../App';\r\nimport { LoginContext } from '../App';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nconst ViewCompare = (props) => {\r\n    console.log(\"%c======= Start Route 'Compare.js' =======\\n \\t <Component> \\t Props = \", \"background:#00966B;color:#ffffff;\",props);\r\n\r\n    const [cookies, setCookies] = useCookies([]);\r\n    // Context \r\n    const media = useContext(MediaContext);\r\n    const {userInfo} = useContext(LoginContext);\r\n\r\n    // Ref\r\n    const menuFrame = useRef(null);\r\n    const favWrapper = useRef(null);\r\n    const afterAlert = useRef(null);\r\n\r\n    // State\r\n    const [productData, setProductData] = useState(props.location.state ? props.location.state.data : undefined);\r\n\r\n    // Field\r\n    let isAfterRequest = false;\r\n    let isMyProductRequest = false;\r\n    let activeSize = null;\r\n\r\n    const __queryConnect = useCallback(async () => {\r\n        // 'history.state.data' 로 데이터가 안넘어옴.\r\n        if(productData === undefined) {\r\n            console.log(\"%c No Data -- Try get Product data use query.\", 'background:red; color:#fff;');\r\n            // prop.location.state 를 못받아옴\r\n            \r\n            const params = new URLSearchParams(props.location.search);\r\n            if(params.has('shop') && params.has('no')) {\r\n                // Query가 일치\r\n                const response = await axios({\r\n                    method:'get',\r\n                    url : `http://localhost:3001/product/get${props.location.search}`,\r\n                    timeout: 4000\r\n                }).catch(() => {\r\n                    return {data : {status : -200}};\r\n                });\r\n                console.log(\"Server get data use $Query : \",response);\r\n                if(response.data.status) {\r\n                    // 데이터 불러오기 실패\r\n                    switch(response.data.status) {\r\n                        case -200 : {\r\n                            console.log(\"Server network error...\");\r\n                            break;\r\n                        }\r\n                        case 404 : {\r\n                            // No data\r\n                            break;\r\n                        }\r\n                        default : {\r\n                            console.log(\"NO RESPONSE\");\r\n                        }\r\n                    }\r\n                } else if(response.data._id) {\r\n                    // Cookie 저장\r\n                    try {\r\n                        const sname = response.data.info.sname;\r\n                        const pname = response.data.info.pname;\r\n                        let isSame = false;\r\n    \r\n                        let current = cookies.sizelity_currentSearchData;\r\n                        if(current) {\r\n                            for(const element of current) {\r\n                                if(element[0] === sname && element[1] === pname) {\r\n                                    isSame = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            current = new Array([]);\r\n                        }\r\n                        if(!isSame) {\r\n                            current.unshift([ response.data.info.sname, response.data.info.pname, response.data.info.subtype, response.data.praw.full]);\r\n                            setCookies(\"sizelity_currentSearchData\",current,{path:\"/\", maxAge:(500 * 24 * 60 * 60)});\r\n                        }\r\n                    } catch{} finally {\r\n                        setProductData(response.data);\r\n                    }\r\n                } else {\r\n                    // Error 아무데이터도 수신 받지 못함\r\n                    throw new Error(\"Server get empty data\");\r\n                }\r\n                \r\n            } else {\r\n                // Query가 맞지 않음.\r\n            }\r\n        }\r\n    }, [productData]);\r\n\r\n    const wrapperToggle = {\r\n        menu : function(force, e) {\r\n            this.__toogle(menuFrame.current, force, e);\r\n        },\r\n        __toogle : (wrapper, force, e) => {\r\n            if(!wrapper) return;\r\n            if(e) e.stopPropagation();\r\n            if(force === undefined) wrapper.classList.toggle(\"active\");\r\n            else wrapper.classList.toggle(\"active\", force);\r\n        },\r\n        favorite : (force, e) => {\r\n            if(!favWrapper.current) return;\r\n            if(e) e.stopPropagation();\r\n            if(force === undefined) {\r\n                favWrapper.current.classList.toggle(\"active\");\r\n                setTimeout(() => {favWrapper.current.querySelector(\"article\").classList.toggle(\"active\");},50);\r\n            } else {\r\n                if(force) {\r\n                    favWrapper.current.classList.add(\"active\");\r\n                    setTimeout(() => {favWrapper.current.querySelector(\"article\").classList.add(\"active\");},50);\r\n                } else {\r\n                    favWrapper.current.querySelector(\"article\").classList.remove(\"active\");\r\n                    favWrapper.current.classList.remove(\"active\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const alert = {\r\n        // type : error || normal || clear\r\n        alertToggle : (force, msg, type) => {\r\n            if(!afterAlert.current) return;\r\n            const cl = afterAlert.current.classList;\r\n            if(force === undefined) force = !cl.contains(\"on\");\r\n            if(force === true) {\r\n                if(msg !== undefined) {\r\n                    if(type === \"error\" || type === \"normal\" || type === \"clear\") {\r\n                        const title = afterAlert.current.querySelector(\"p.title\");\r\n                        if(title) {\r\n                            title.innerHTML = msg;\r\n                            title.classList.remove(\"error\", \"normal\", \"clear\");\r\n                            title.classList.add(type);\r\n                        }\r\n                    }\r\n                }\r\n                cl.add(\"on\");\r\n            } else {\r\n                cl.remove(\"on\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // ref={favWrapper} wrapper 에서의  handler object\r\n    const fav = {\r\n        myWardrobe: function() {\r\n            if(isMyProductRequest) {\r\n                // 해당 상품 추가기록 존재\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                return;\r\n            }\r\n            activeSize = document.querySelector(\"input[type='radio'][name='select-size']:checked\");\r\n            if(activeSize) {\r\n                // 사이즈 선택됨\r\n                if(window.confirm(`'${activeSize.value}'로 저장 하시겠습니까?`)) {\r\n                    const saveData = {\r\n                        _id : userInfo._id,\r\n                        upwd: userInfo.sili_p,\r\n                        product : {\r\n                            status : 200,\r\n                            info : productData.info,\r\n                            praw : productData.praw,\r\n                            size : null\r\n                        }\r\n                    }\r\n                    for(const element of productData.size) {\r\n                        if(element.name === activeSize.value) {\r\n                            saveData.product.size = element;\r\n                            break;\r\n                        }\r\n                    }\r\n                    try {\r\n                        if(saveData.product.size) {\r\n                            (async () => {\r\n                                const response = await axios({\r\n                                    method: 'post',\r\n                                    url : \"http://localhost:3001/user/setproduct\",\r\n                                    data : saveData,\r\n                                    timeout : 4000\r\n                                }).catch(() => {\r\n                                    return {data : {status : -200}};\r\n                                });;\r\n                                wrapperToggle.favorite(false);\r\n                                if(response.data && response.data.status !== undefined) {\r\n                                    switch(response.data.status) {\r\n                                        case 200 : {\r\n                                            isMyProductRequest = true;\r\n                                            alert.alertToggle(true, \"나의 상품에 추가하였습니다.\", \"clear\");\r\n                                            break;\r\n                                        }\r\n                                        case 0 : {\r\n                                            isMyProductRequest = true;\r\n                                            alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                                            break;\r\n                                        }\r\n                                        case -1 : {\r\n                                            alert.alertToggle(true, \"로그인 후 이용가능합니다.\", \"error\");\r\n                                            break;\r\n                                        }\r\n                                        default : {\r\n                                            alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");        \r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    // 서버로 부터 넘어오는 데이터의 문제발생 : 서버 확인 요망\r\n                                    alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                                }\r\n                            })();\r\n                        } else {\r\n                            // 사이즈 선택안됨 : 코드 문제.\r\n                            wrapperToggle.favorite(false);\r\n                            alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                        }\r\n                    } catch(error) {\r\n                        console.log(error);\r\n                        wrapperToggle.favorite(false);\r\n                        alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                    }\r\n                    \r\n                }\r\n            } else {\r\n                // 사이즈 선택안됨\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"나의 상품으로 등록할 <b>사이즈를 선택</b>해주세요.\", \"error\");\r\n            }\r\n        }\r\n    }\r\n    const after = {\r\n        set : function() {\r\n            if(isAfterRequest) {\r\n                // 해당 페이지에서 한번 요청한적 있음.\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                return;\r\n            }\r\n            /*\r\n            {\r\n                _id : String,\r\n                upwd : String,\r\n                product : {\r\n                    praw : {\r\n                        domain : String,\r\n                        code : String,\r\n                        full : String\r\n                    },\r\n                    info : {\r\n                        sname : String,\r\n                        pname : String,\r\n                        subtype : String\r\n                    }\r\n                }\r\n            }\r\n            */\r\n            const {_id, sili_p} = userInfo;\r\n            if(!_id && !sili_p) {\r\n                //  로그인 안된 상태\r\n                alert.alertToggle(true, \"로그인 후 이용가능 합니다.\", \"error\");\r\n                return;\r\n            }\r\n            try {\r\n                const sendData = {\r\n                    _id : _id,\r\n                    upwd : sili_p,\r\n                    product : {\r\n                        praw : {\r\n                            domain : productData.praw.domain,\r\n                            code : productData.praw.code,\r\n                            full : productData.praw.full\r\n                        },\r\n                        info : {\r\n                            sname : productData.info.sname,\r\n                            pname : productData.info.pname,\r\n                            subtype : productData.info.subtype\r\n                        }\r\n                    }\r\n                };\r\n                ( async () => { \r\n                    const result = await axios({\r\n                        method: 'post',\r\n                        url : 'http://localhost:3001/user/setafter',\r\n                        data : sendData,\r\n                        setTimeout: 4000\r\n                    }).catch(() => {\r\n                        return {data : {status : -200}};\r\n                    });;\r\n                    console.log(result.data);\r\n                    if(result.data) {\r\n                        wrapperToggle.favorite(false);\r\n                        switch(result.data.status) {\r\n                            case 200 : {\r\n                                isAfterRequest = true;\r\n                                alert.alertToggle(true, \"나중에 볼 상품에 추가하였습니다.\", \"clear\");\r\n                                break;\r\n                            }\r\n                            case 0 : {\r\n                                isAfterRequest = true;\r\n                                alert.alertToggle(true, \"이미 추가된 상품입니다.\", \"normal\");\r\n                                break;\r\n                            }\r\n                            case -1 : {\r\n                                alert.alertToggle(true, \"로그인 후 이용가능합니다.\", \"error\");\r\n                                break;\r\n                            }\r\n                            default : {\r\n                                alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                })();\r\n            } catch(error) {\r\n                console.log(error);\r\n                wrapperToggle.favorite(false);\r\n                alert.alertToggle(true, \"잠시 후 다시 시도해주세요.\", \"error\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        __queryConnect();\r\n    })\r\n    return (\r\n        <div id=\"View\">\r\n            {\r\n                productData ? (\r\n                    <>\r\n                        <div className=\"alertWrapper\" ref={afterAlert}>\r\n                            <div className=\"alertFrame\">\r\n                                <p className=\"title\">Test Message</p>\r\n                            </div>\r\n                            {\r\n                                media === \"Desktops\" ?\r\n                                <div className=\"alertClose\" onClick={() => alert.alertToggle(false)}></div> :\r\n                                <div className=\"alertClose\" onTouchStart={() => alert.alertToggle(false)}></div>\r\n                            }\r\n                        </div>\r\n                        <nav id=\"Compare-nav\">\r\n                            <div id=\"Compare-top\">\r\n                                <div  id=\"logo\" className=\"nav-element\" >\r\n                                    <Link to=\"/\">Sizelity.</Link>\r\n                                </div>\r\n                                <Link to=\"/search\" className=\"nav-element\" >\r\n                                    <i className=\"material-icons\">search</i>\r\n                                </Link>\r\n                                <div className=\"nav-element\" onClick={() => wrapperToggle.favorite(true)}>\r\n                                    <i className=\"material-icons\">star_border</i>\r\n                                </div>\r\n                                <div className=\"nav-element\" onClick={() => menuFrame.current.classList.add(\"active\")}>\r\n                                    <i className=\"material-icons\">menu</i>\r\n                                </div>\r\n                            </div>\r\n                        </nav>\r\n                        <section id=\"fav-select-wrapper\" ref={favWrapper}>\r\n                            <article>\r\n                                {\r\n                                    userInfo ? (\r\n                                        <>\r\n                                            <h1>\r\n                                                <b>어디</b>에 추가할까요?\r\n                                            </h1>\r\n                                            <div className=\"fav-select-btn\">\r\n                                                <button style={{borderRight:\"1px solid #dbdbdb\"}} onClick={() => fav.myWardrobe()}>나의 옷장</button>\r\n                                                <button onClick={() => after.set()}>나중에 볼 상품</button>\r\n                                            </div>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <i className=\"material-icons\">lock</i>\r\n                                            <h1>\r\n                                                <b>로그인</b>이 필요해요.\r\n                                            </h1>\r\n                                            <div className=\"fav-select-login\">\r\n                                                <Link to=\"/view/login\">로그인</Link>\r\n                                            </div>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                            </article>\r\n                            {\r\n                                (media === \"Phone\") ?  \r\n                                (<div className=\"_blank\" onTouchStart={() => wrapperToggle.favorite(false)}></div>) :\r\n                                (<div className=\"_blank\" onClick={() => wrapperToggle.favorite(false)}></div>)\r\n                            }\r\n                        </section>\r\n                        <section id=\"Menu\" onClick={(e) => {wrapperToggle.menu(false,e)}} ref={menuFrame}>\r\n                            <Menu />\r\n                        </section>\r\n                        <NavMyProduct\r\n                            myProductData={cookies.sizelity_myRecently}\r\n                            history={props.history}/>\r\n                        <Compare\r\n                            productData={productData} \r\n                            myProduct={cookies.sizelity_myRecently}/>    \r\n                    \r\n                    </>\r\n                ) : (\r\n                    <div className=\"loaderFrame\">\r\n                        <div className=\"loader\"></div>\r\n                    </div>\r\n                )\r\n            }\r\n           </div> \r\n    );\r\n}\r\nexport default ViewCompare;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductData.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\MyProductData.js",[],["150","151"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\ProductSearch.js",["152","153"],"import axios from 'axios';\r\nimport Cookie from './Cookie';\r\nimport URLModule from './URL';\r\n\r\n\r\nconst URL = \"http://localhost:3001/product/get\";\r\n//const URL = \"http://172.30.1.31:3001/product/get\";\r\n\r\nclass ProductSearch {\r\n    constructor() {\r\n        this.current = undefined; // :array\r\n        this.cookie = new Cookie();\r\n\r\n        this.cnameCurrent = \"sizelity_currentSearchData\";\r\n        this.URL = \"\"\r\n    }\r\n    getCurrent() {\r\n        return this.refreshCurrent(); //:array\r\n    }\r\n/*\r\n    @params data :  최근본 상품에 추가할 데이터\r\n    Array index info\r\n    {\r\n        sname: \"string\", -- 0\r\n        pname:\"string\", -- 1\r\n        subtype:\"string\", -- 2\r\n        praw : \"string\" -- 3\r\n    }\r\n    ex) [[\"조군샵\",\"탄탄한 앤디 텍스쳐 라운드 긴팔티\",\"긴팔\",\"www.jogunshop.com/shop/shopdetail.html?branduid=26598\"]]\r\n*/\r\n\r\n    setCurrent(data) {\r\n        console.log(\"Current Set Cookie \", data);\r\n        if(data && data.status === 200 && data.info.pname !== undefined) {\r\n            console.log(\"%c Inner\",\"background: darkorchid; color: #ffffff\");\r\n            let _current = this.getCurrent();\r\n\r\n            const createElement = (data) => {\r\n                return (\r\n                    [\r\n                        data.info.sname,\r\n                        data.info.pname,\r\n                        data.info.subtype,  \r\n                        data.praw.full\r\n                    ]\r\n                );\r\n            }\r\n\r\n            if(_current && _current.constructor === Array) {\r\n                // 중복확인\r\n                const pname = data.info.pname;\r\n                let _isOver = false;\r\n                for(const index in _current) {\r\n                    if(_current[index][1] === pname) {\r\n                        \r\n                        _isOver = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if(_isOver) return _current;\r\n            } else {\r\n                _current = [];\r\n                \r\n            }\r\n            if(_current.length > 20) {_current.pop();}\r\n            _current.unshift(createElement(data));\r\n\r\n            console.log(\"%c_current : \", \"background:orange; color: #fff;\",_current);\r\n\r\n            this.cookie.set(this.cnameCurrent,_current);\r\n            return _current;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    refreshCurrent() { // refresh\r\n        this.current = this.cookie.get(this.cnameCurrent);\r\n        return this.current;\r\n    }\r\n    \r\n    fetchCurrent(changeCurrent) {\r\n        let isChange = false;   \r\n        const afterCurrent = [];\r\n        changeCurrent.forEach(element => {\r\n            if(element) {\r\n                isChange = true;\r\n                afterCurrent.push(element);\r\n            }\r\n        });\r\n        if(isChange) {\r\n            this.cookie.set(this.cnameCurrent, afterCurrent);\r\n            return true;\r\n        } else return false;\r\n    }\r\n    async search(url) {\r\n        const urlModule = new URLModule();\r\n        try {\r\n            const data = urlModule.get(url);\r\n            console.log(data);\r\n            if(data === null) return {status : -404};\r\n            if(data) {\r\n                const response = await axios({\r\n                    method : 'post',\r\n                    url : URL,\r\n                    data : data\r\n                });\r\n                console.log(\"%c Product Search Result : \", \"background: red; color: #fff;\",response.data);\r\n                if(response.data._id) {\r\n                    response.data.status = 200;\r\n                }\r\n                return response.data\r\n            }\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n    searchQuery(query) {\r\n        // location.search\r\n        const params = new URLSearchParams(query); // {'key' => 'value', ...}\r\n        if(params.has(\"shop\") && params.has(\"no\")) {\r\n            const sname = params.get(\"shop\");\r\n            const code = params.get(\"no\");\r\n            // Test Case\r\n            \r\n        } else {\r\n            // 쿼리가 없음\r\n            throw new Error(\"...\");\r\n        }\r\n    }\r\n}\r\nexport default ProductSearch;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\Cookie.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\AfterProduct.js",["154"],"import '../contents/css/Router/AfterProduct.css';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\n\r\n// Context \r\nimport {LoginContext}from '../App';\r\nimport axios from 'axios';\r\n\r\nconst AfterProduct = ({history}) => {\r\n    // Context\r\n    const {userInfo} = useContext(LoginContext);\r\n    // State\r\n    const [loader, setLoader] = useState(true);\r\n    const [deleteOption, setDeleteOption] = useState(false);\r\n    const [afterList, setAfterList] = useState(null);\r\n\r\n    // Ref\r\n    const reomveWrapper = useRef(null);\r\n    console.log(userInfo);\r\n    if(userInfo === null) {\r\n        history.replace(\"/wrong\");\r\n    } else if(!userInfo || !userInfo._id || !userInfo.sili_p || !userInfo.name) {\r\n        history.replace(\"/wrong\");\r\n    }\r\n    \r\n    const request = {\r\n        getAfterList : async () => {\r\n            if(!userInfo || !userInfo._id || !userInfo.sili_p) return;\r\n            const result = await axios({\r\n                method: 'post',\r\n                url : 'http://localhost:3001/user/getafter',\r\n                data : {\r\n                    _id : userInfo._id,\r\n                    upwd : userInfo.sili_p\r\n                },\r\n                timeout : 5000\r\n            });\r\n            console.log(\"요청 결과\", {_id : userInfo._id, upwd: userInfo.sili_p});\r\n            console.log(\"요청 결과 정보\",result.data);\r\n            setLoader(false);\r\n            try {\r\n                if(result.data) {\r\n                    setAfterList(result.data);\r\n                } else {\r\n                    setAfterList(null);\r\n                }\r\n            } catch(error) {\r\n                alert(\"error\");\r\n                console.log(\"error\");\r\n                setAfterList(null);\r\n            }\r\n        },\r\n        removeAfterList : async (data) => {\r\n            const result = await axios({\r\n                method: 'post',\r\n                url : 'http://localhost:3001/user/removeafter',\r\n                data : data,\r\n                timeout : 4000\r\n            });\r\n            console.log(\"삭제 결과 : \",result);\r\n        }\r\n\r\n    }\r\n    const event = {\r\n        removeToggle : () => {\r\n            if(!deleteOption) setDeleteOption(true);\r\n            else event.removeComfirmToggle(true);\r\n        },\r\n        removeCancel : () => {\r\n            event.removeComfirmToggle(false);\r\n            setDeleteOption(false)\r\n        },\r\n        moveCompare : (element) => {\r\n            history.push({\r\n                pathname: \"/view/compare\",\r\n                search: `?shop=${element.praw.domain}&no=${element.praw.code}`\r\n            });\r\n        },\r\n        removeData : {\r\n            _id : userInfo && userInfo._id ? userInfo._id : null,\r\n            upwd : userInfo && userInfo.sili_p ? userInfo.sili_p : null,\r\n            product : [\"asdfsaf\"]\r\n        },\r\n        count : 0,\r\n        remove : (_id, e) => {\r\n            e.stopPropagation();\r\n            let target = e.target;\r\n            let i = 0;\r\n            while(!(target.classList.contains(\"After-element\")) && i < 5) {\r\n                target = target.parentElement;\r\n                i++;\r\n            }\r\n            if(i === 4 && !target.classList.contains(\"After-element\")) return;\r\n            else {\r\n                target.classList.add(\"remove\");\r\n                setTimeout(() => target.remove(),360);\r\n            }\r\n            event.removeData.product.push(_id);\r\n            event.count++;\r\n        },\r\n        removeSend : async () => {\r\n            console.log(\"삭제할 데이터 : \", event.removeData);\r\n            await request.removeAfterList(event.removeData);\r\n            event.removeComfirmToggle(false);\r\n            setDeleteOption(false);\r\n        },\r\n        removeComfirmToggle : (force) => {\r\n            if(!reomveWrapper.current) return;\r\n            if(force === undefined) force =  !reomveWrapper.current.classList.contains(\"on\");\r\n            if(force) {\r\n                if(event.count > 0) reomveWrapper.current.classList.add(\"on\");\r\n                else setDeleteOption(false);\r\n            } else if(!force) reomveWrapper.current.classList.remove(\"on\");\r\n            \r\n        }\r\n    }\r\n    useEffect(() => {\r\n        request.getAfterList();\r\n    }, []);\r\n    return (\r\n        <section id=\"After\">\r\n            <div className=\"remove-wrapper\" ref={reomveWrapper}>\r\n                <div className=\"msg\">\r\n                    <h1 style={{color:\"#ff0000\"}}>\"삭제\"</h1>\r\n                    <h1>하시겠습니까?</h1>\r\n                </div>\r\n                <div className=\"confirm\">\r\n                    <div style={{borderRight:\"1px solid #dbdbdb\"}} onClick={() => event.removeSend()}>\r\n                        <p>삭제</p>\r\n                    </div>\r\n                    <div onClick={() => event.removeCancel()}>\r\n                        <p>취소 </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <i className=\"material-icons back\" onClick={() => history.goBack()}>arrow_back</i>\r\n            <header>\r\n                <h1>나중에 볼 상품</h1>\r\n                <p>최대 30개 저장</p>\r\n                <p>(30개 초과시 오래된 순서로 자동삭제됩니다)</p>\r\n            </header>\r\n            <article>\r\n                <div className=\"func-btn-wrapper\">\r\n                    <button className={deleteOption ? \"on\" : \"\"} onClick={() => event.removeToggle()}>{deleteOption ? \"저장\" : \"삭제\"}</button>\r\n                </div>\r\n                    {\r\n                        loader ? (\r\n                            <div className=\"loaderFrame\">\r\n                                <div className=\"loader\"></div>\r\n                            </div>\r\n                        ) : (\r\n                            (afterList && afterList[0]) ? (\r\n                                <ul>\r\n                                    {\r\n                                      afterList.map((element, index) => (\r\n                                            <li key={index} className=\"After-element\">\r\n                                                <div className=\"After-elementInfoFrame\" onClick={() => event.moveCompare(element)}>\r\n                                                    <div className=\"After-elementInfo\">\r\n                                                        <input type=\"hidden\" name=\"pcode\"/>\r\n                                                        <p>{element.info.sname}</p>\r\n                                                        <h1>{element.info.pname}</h1>\r\n                                                    </div>\r\n                                                    <p>{element.info.subtype}</p>\r\n                                                </div>\r\n                                                <a href={`http://${element.praw.full}`}><i className=\"material-icons\">open_in_new</i></a>\r\n                                                <button onClick={(e) => event.remove(element._id,e)} className={deleteOption ? \"active\" : \"\"}>\r\n                                                    <i className=\"material-icons\">remove</i>\r\n                                                </button>\r\n                                            </li>\r\n                                        ))\r\n                                }\r\n                                </ul>\r\n                            ) : (\r\n                                <div className=\"After-none\">\r\n                                    <p>나중에 볼 상품이 없습니다.</p>\r\n                                </div>       \r\n                            )\r\n                        )\r\n                    }\r\n            </article>\r\n        </section>\r\n    )\r\n}\r\n/*\r\n    Data Format\r\n    [\r\n        {\r\n            pcode : \"PAAA0001\", -- 0\r\n            sname : \"string\", -- 1\r\n            pname : \"string\", -- 2\r\n            subtype : \"string\", -- 3\r\n            praw : {\r\n                full : \"string\", -- 0\r\n                code : \"string\" -- 1\r\n            } -- 4\r\n            \r\n        }, ...\r\n    ]\r\n*/\r\nexport default AfterProduct;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Test.js",["155","156"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\contents\\js\\URL.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\UserProduct.js",["157","158","159","160"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Nav_MyProduct.js",["161"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Compare.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Menu.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_MyProduct.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\View\\View_Compare_List.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Login.js",["162","163","164"],"import { Link } from 'react-router-dom';\r\nimport { useContext, useEffect, useRef } from 'react';\r\n\r\n// JS\r\nimport LoginModule from '../../contents/js/Login';\r\n\r\n// CSS\r\nimport '../../contents/css/Login/Login.css';\r\n\r\n// Context\r\nimport {LoginContext} from '../../App';\r\nlet loginModule = null;\r\nlet loginObject = {uid:undefined, upwd:undefined};\r\nconst ViewLogin = ({history}) => {\r\n    const alertWrapper = useRef(null);\r\n    const alertText = useRef(null);\r\n    let submitBtn = null;\r\n\r\n    const email = useRef(null);\r\n    const pwd = useRef(null);\r\n\r\n    const {userInfo, setUserInfo} = useContext(LoginContext);\r\n    console.log(userInfo);\r\n    useEffect(() => {\r\n        if(userInfo && userInfo._id) {\r\n            // 로그인 되어있음.\r\n            history.replace(\"/wrong\");\r\n        }\r\n    }, []);\r\n    const alertMessage = {\r\n        NetWorkError : \"네트워크 오류\",\r\n        WrongError : \"이메일 또는 비밀번호를 확인해주세요.\",\r\n        ServerError : \"잠시 후 시도해주세요.\"\r\n    }   \r\n\r\n    const login = {\r\n        loginEvent : async (e) => {\r\n            const __id = email.current.value;\r\n            const toggleWrong = (target, force) => target.current.classList.toggle(\"wrong\",force);\r\n            const isEmail = ((value) => {\r\n                return (/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n            })(__id);\r\n            if(isEmail) toggleWrong(email,false);\r\n            else {\r\n                toggleWrong(email,true);\r\n                return false;\r\n            }\r\n            const __password = pwd.current.value;\r\n            const isPwd = ((value) => {\r\n                return (/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(value);\r\n            })(__password);\r\n            if(isPwd) toggleWrong(pwd,false);\r\n            else {\r\n                toggleWrong(pwd,true);\r\n                return false;\r\n            }\r\n\r\n            if(!loginModule) loginModule = new LoginModule();\r\n            loginObject.uid = __id;\r\n            loginObject.upwd = __password;\r\n\r\n\r\n            event.disabled(true, e.target);\r\n            const result = await loginModule.send(loginObject);\r\n            if(!email.current) return; // 페이지 벗어남.\r\n\r\n            if(result.name) {\r\n                setUserInfo(result);\r\n                history.goBack();\r\n            } else {\r\n                // 로그인 실패\r\n                if(result === false) {\r\n                    // 서버로의 전송 전 데이터 검증 과정에서 걸 림.\r\n                    /*\r\n                        - 발생 요인\r\n                        1. 프런트 코딩 단계 : Component 에서 Login 라이브러리로 전송하는 데이터의 형식을 봐야할 듯.\r\n                    */\r\n                   event.openAlert(alertMessage.NetWorkError);\r\n                } else if(result.status) {\r\n                    switch(result.status) {\r\n                        case -200 : {\r\n                            // 서버와의 통신중에 문제가 생김\r\n                            event.openAlert(alertMessage.ServerError);\r\n                            break;\r\n                        }\r\n                        case -404 : {\r\n                            // 서버에 형식에 맞지않는 데이터를 전송\r\n                            /*\r\n                                - 발생 요인\r\n                                1. 프런트 코딩단계 : 서버에서 처리하는 데이터와 프런트의 데이터 형식을 맞추지 않고 처리했는지 확인\r\n                                2. 백엔드 코딩단계 : 서버에서의 처리과정 중 일치하지 않는 데이터를 처리하는지 확인\r\n                                3. 보안단계 : 악의적인 코드 주입을 통한 일치 하지 않는 데이터 주입\r\n                                        -> 서버 전송 전 데이터 검증 과정을 거치나, 1,2번 문제가 아닌 경우 우회적으로 데이터 주입.\r\n                             */\r\n                            event.openAlert(alertMessage.ServerError);\r\n                            break;\r\n                        }\r\n                        case 404 : {\r\n                            event.openAlert(alertMessage.WrongError);\r\n                            break;\r\n                        }\r\n                        default : {\r\n                            event.openAlert(alertMessage.ServerError);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const event = {\r\n        closeAlert : function() {\r\n            if(!alertWrapper.current) return;\r\n            alertWrapper.current.classList.remove(\"on\");\r\n        },\r\n        openAlert : function(Msg) {\r\n            this.setText(Msg);\r\n            if(!alertWrapper.current) return;\r\n            this.disabled(false)\r\n            alertWrapper.current.classList.add(\"on\");\r\n        },\r\n        setText : function(Msg) {\r\n            console.log(Msg);\r\n            if(!alertText) return;\r\n            alertText.current.innerHTML = Msg;\r\n        },\r\n        disabled : function(force, submit) {\r\n            if(!alertWrapper.current) return;\r\n            alertWrapper.current.classList.toggle(\"ready\",force);\r\n            if(!submitBtn) submitBtn = submit;\r\n            submitBtn.disabled = force;\r\n            email.current.disabled = force;\r\n            pwd.current.disabled = force;\r\n        }\r\n    }\r\n    return (\r\n        <section id=\"View-login\">\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\">\r\n                    <p ref={alertText}></p>\r\n                </div>\r\n                <div className=\"blank\" onTouchStart={() => event.closeAlert()}></div>\r\n            </div>\r\n            <div className=\"Login-backFrame\" onClick={() => history.goBack()}>\r\n                <i className=\"material-icons\">arrow_back</i>\r\n            </div>\r\n            <article>\r\n                <form id=\"loginForm\">\r\n                    <div className=\"input-wrapper\">\r\n                        <input type=\"email\" ref={email} className=\"user-input\" id=\"user-input-id\" placeholder=\"이메일\" />\r\n                        <input type=\"password\" ref={pwd} className=\"user-input\" id=\"user-input-password\" placeholder=\"비밀번호\" />\r\n                    </div>\r\n                </form>\r\n                <div className=\"submit-wrapper\">\r\n                    <button id=\"submit-btn\" onClick={(e) => login.loginEvent(e)}>로그인</button>\r\n                </div>\r\n                <div className=\"login-option-wrapper\">\r\n                    <Link id=\"join-btn\" to=\"/login/join\">\r\n                        <h4>계정이 없으신가요?</h4>\r\n                        <h2>회원가입</h2>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"line\"><div></div></div>\r\n                <div className=\"login-option-wrapper\">\r\n                    <Link to=\"/login/accounthelp\">\r\n                        <h4>비밀번호를 잊으셨나요?</h4>\r\n                    </Link>\r\n                </div>\r\n            </article>\r\n            <footer>\r\n\r\n            </footer>\r\n        </section>\r\n    )\r\n}\r\nexport default ViewLogin;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\Join.js",["165","166","167","168","169"],"import axios from 'axios';\r\nimport { useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../contents/css/Login/Join.css';\r\nconst URL = \"http://localhost:3001/user/signup\"; // Local\r\n//const URL = \"http://172.30.1.31:3001/user/signup\"; // Cafe\r\n//const URL = \"http://192.168.11.2:3001/user/signup\"; // Home\r\n\r\n\r\nconst Join = ({history}) => {\r\n    // Ref\r\n    const resultWrapper = useRef(null); // \"환영합니다.\"\r\n    const alertWrapper = useRef(null);  // 상단 알림\r\n\r\n    const email = useRef(null);\r\n    const pwd = useRef(null);\r\n    const rePwd = useRef(null);\r\n    const name = useRef(null);\r\n\r\n    let gender = null;\r\n    let genderSelect = 'not';\r\n    let privacy = null;\r\n\r\n    const event = {\r\n        submitEvent : () => {\r\n            if(!checkRule()) return false;\r\n            const account = {\r\n                uid : email.current.value,\r\n                upwd : pwd.current.value,\r\n                name : name.current.value,\r\n                gender : genderSelect,\r\n                privacy : true,\r\n                alert : privacy[2].checked\r\n            }\r\n            console.log(account);\r\n            \r\n            // SUBMIT\r\n            ( async () => {\r\n                try {\r\n                    resultWrapper.current.classList.add(\"on\");\r\n                    const result = await axios({\r\n                        method : 'post',\r\n                        url : URL,\r\n                        data : account,\r\n                        timeout : 3000\r\n                    });\r\n                    console.log(\"응답 결과 : \", result.data);\r\n                    switch(result.data.status) {\r\n                        case 200 : {\r\n                            // Success\r\n                            resultWrapper.current.querySelector('.result-frame').classList.add(\"on\");\r\n                            setTimeout(() => {\r\n                                history.replace('/view/login');\r\n                            }, 1500);\r\n                            break;   \r\n                        }\r\n                        case 0 : {\r\n                            // already Email\r\n                            event.alertToggle(true, \"이미 가입된 이메일 입니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        case -404 : {\r\n                            // invalid Data\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        case -200 : {\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\\n 잠시뒤 다시 시도해주세요.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                            break;\r\n                        }\r\n                        default : {\r\n                            event.alertToggle(true, \"시스템 오류가 발생하였습니다.\");\r\n                            resultWrapper.current.classList.remove(\"on\");\r\n                        }\r\n                    }\r\n                } catch {\r\n                    event.alertToggle(true, \"네트워크 연결을 확인해주세요.\");\r\n                    resultWrapper.current.classList.remove(\"on\");\r\n                }\r\n            })();\r\n\r\n        }, // submitEvent()\r\n        genderChange : () => {\r\n            if(gender) {\r\n                for(const element of gender) {\r\n                    if(element.checked) {\r\n                        element.parentElement.classList.add(\"on\");\r\n                        genderSelect = element.value;\r\n                    } else {\r\n                        element.parentElement.classList.remove(\"on\");\r\n                    }\r\n                }\r\n            }\r\n        }, // genderChange\r\n\r\n        privacyEvent : (e) => {\r\n            const target = e.target;\r\n            if(target.checked) target.parentElement.classList.add(\"on\");\r\n            else target.parentElement.classList.remove(\"on\");\r\n        }, // Privacy Event\r\n\r\n        alertToggle : (force, msg) => {\r\n            if(!alertWrapper.current) return;\r\n            if(force === undefined) force = !alertWrapper.current.classList.contain('on');\r\n            if(msg) alertWrapper.current.querySelector(\"p\").innerHTML = msg;\r\n            alertWrapper.current.classList.toggle(\"on\",force);\r\n        } // alertToggle\r\n    }\r\n    const checkRule = () => {\r\n        // Check\r\n        const toggleWrong = (target, force) => target.current.classList.toggle(\"wrong\",force);\r\n        const isEmail = ((value) => {\r\n            return (/^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i).test(value);\r\n        })(email.current.value);\r\n        if(isEmail) toggleWrong(email,false);\r\n        else {\r\n            toggleWrong(email,true);\r\n            return false;\r\n        }\r\n\r\n        const isPwd = ((value) => {\r\n            return (/^(?=.*[a-zA-Z])((?=.*\\d)|(?=.*\\W)).{8,20}$/).test(value);\r\n        })(pwd.current.value);\r\n        if(isPwd) toggleWrong(pwd,false);\r\n        else {\r\n            toggleWrong(pwd,true);\r\n            return false;\r\n        }\r\n        const isRePwd = (pwd.current.value === rePwd.current.value);\r\n        if(isRePwd) toggleWrong(rePwd,false);\r\n        else { \r\n            toggleWrong(rePwd,true);\r\n            return false;\r\n        }\r\n\r\n        const isName = ((value) => {\r\n            return (value.length > 1 && value.length < 25)\r\n        })(name.current.value);\r\n        if(isName) toggleWrong(name,false);\r\n        else {\r\n            toggleWrong(name,true);\r\n            return false;\r\n        }\r\n\r\n        if(privacy) {\r\n            if(privacy[0].checked && privacy[1].checked) {\r\n                return true;\r\n            } else {\r\n                alert(\"필수 약관에 동의해주세요.\");\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(!gender) gender = document.querySelectorAll('input[type=\"radio\"][name=\"gender\"]');\r\n        if(!privacy) privacy = document.querySelectorAll('.privacy-wrapper input[type=\"checkbox\"]');\r\n    }, []);\r\n    return (\r\n        <section id=\"View-Join\">\r\n            <div className=\"result-wrapper\" ref={resultWrapper}>\r\n                <div className=\"loader-frame\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n                <div className=\"result-frame\">\r\n                    <h1>환영합니다</h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"alert-wrapper\" ref={alertWrapper}>\r\n                <div className=\"alert-frame\"><p></p></div>\r\n                <div className=\"blank\" onTouchStart={() => event.alertToggle(false)}></div>\r\n            </div>\r\n            <header>\r\n                <div className=\"Login-backFrame\" onClick={() => history.goBack()}>\r\n                    <i className=\"material-icons\">arrow_back</i>\r\n                </div>\r\n                <h2>회원가입</h2>\r\n            </header>\r\n            <article className=\"bottom\">\r\n                <form>\r\n                    <div style={{flexGrow : 1}}>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>로그인 정보</h1>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"email\" placeholder=\"이메일 (E-Mail)\" ref={email} autoComplete=\"off\" id=\"input-email\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"password\" placeholder=\"비밀번호 (Password)\" ref={pwd} id=\"input-password\" minLength=\"8\" maxLength=\"25\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"password\" placeholder=\"비밀번호 확인 (Re-Password)\" ref={rePwd} id=\"input-re-password\" minLength=\"8\" maxLength=\"25\"/>\r\n                            </li>\r\n                            <p>영문 대소문자, 숫자, 특수문자 포함 8~20자</p>\r\n                        </ul>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>개인정보</h1>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <input type=\"text\" placeholder=\"이름\" id=\"input-first\" ref={name} autoComplete=\"off\"/>\r\n                            </li>\r\n                            <li className=\"input-wrapper\">\r\n                                <label>\r\n                                    <p>남자</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"male\" onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                                <label>\r\n                                    <p>여자</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"female\" onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                                <label className=\"on\">\r\n                                    <p>비공개</p>\r\n                                    <div className=\"dot\"></div>\r\n                                    <input type=\"radio\" name=\"gender\" value=\"not\" defaultChecked onClick={() => event.genderChange()}/>\r\n                                </label>\r\n                            </li>\r\n                        </ul>\r\n                        <ul>\r\n                            <li className=\"title-wrapper\">\r\n                                <h1>약관</h1>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>사이즈리티 서비스 이용약관 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>개인정보 수집 및 이용동의 (필수)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                            <li className=\"privacy-wrapper\">\r\n                                <label>\r\n                                    <p>프로모션 안내 메일 수신동의 (선택)</p>\r\n                                    <input type=\"checkbox\" onClick={(e) => event.privacyEvent(e)}/>\r\n                                </label>\r\n                                <button type=\"button\">\r\n                                    <i className=\"material-icons\">assignment</i>\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"submit-wrapper\">\r\n                        <button type=\"button\" onClick={() => event.submitEvent()}>가입하기</button>\r\n                    </div>\r\n                </form>\r\n            </article>\r\n        </section>\r\n    );\r\n}\r\nexport default Join;","C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Login\\AccountHelp.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\LoginRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Setting\\Setting.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\SettingRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\NotFoundRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\WrongRouter.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Search.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchResult.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\components\\Search\\SearchCurrent.js",[],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\Compare.js",["170","171"],"C:\\Users\\samsung\\Desktop\\react_study\\sizelity_app\\src\\router\\CompareTest2.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":2,"column":35,"nodeType":"178","messageId":"179","endLine":2,"endColumn":42},{"ruleId":"180","severity":1,"message":"181","line":62,"column":8,"nodeType":"182","endLine":62,"endColumn":10,"suggestions":"183"},{"ruleId":"180","severity":1,"message":"184","line":65,"column":8,"nodeType":"182","endLine":65,"endColumn":18,"suggestions":"185"},{"ruleId":"172","replacedBy":"186"},{"ruleId":"174","replacedBy":"187"},{"ruleId":"180","severity":1,"message":"188","line":105,"column":8,"nodeType":"182","endLine":105,"endColumn":21,"suggestions":"189"},{"ruleId":"172","replacedBy":"190"},{"ruleId":"174","replacedBy":"191"},{"ruleId":"176","severity":1,"message":"192","line":121,"column":19,"nodeType":"178","messageId":"179","endLine":121,"endColumn":24},{"ruleId":"176","severity":1,"message":"193","line":122,"column":19,"nodeType":"178","messageId":"179","endLine":122,"endColumn":23},{"ruleId":"180","severity":1,"message":"194","line":118,"column":8,"nodeType":"182","endLine":118,"endColumn":10,"suggestions":"195"},{"ruleId":"176","severity":1,"message":"196","line":35,"column":13,"nodeType":"178","messageId":"179","endLine":35,"endColumn":17},{"ruleId":"180","severity":1,"message":"197","line":37,"column":66,"nodeType":"182","endLine":37,"endColumn":68,"suggestions":"198"},{"ruleId":"176","severity":1,"message":"199","line":18,"column":11,"nodeType":"178","messageId":"179","endLine":18,"endColumn":23},{"ruleId":"200","severity":1,"message":"201","line":55,"column":82,"nodeType":"202","messageId":"203","endLine":55,"endColumn":93},{"ruleId":"204","severity":1,"message":"205","line":83,"column":13,"nodeType":"206","messageId":"207","endLine":106,"endColumn":14},{"ruleId":"180","severity":1,"message":"208","line":261,"column":8,"nodeType":"182","endLine":261,"endColumn":21,"suggestions":"209"},{"ruleId":"180","severity":1,"message":"210","line":46,"column":8,"nodeType":"182","endLine":46,"endColumn":23,"suggestions":"211"},{"ruleId":"180","severity":1,"message":"212","line":29,"column":8,"nodeType":"182","endLine":29,"endColumn":10,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":41,"column":42,"nodeType":"216","messageId":"217","endLine":41,"endColumn":43,"suggestions":"218"},{"ruleId":"214","severity":1,"message":"215","line":41,"column":75,"nodeType":"216","messageId":"217","endLine":41,"endColumn":76,"suggestions":"219"},{"ruleId":"176","severity":1,"message":"220","line":3,"column":10,"nodeType":"178","messageId":"179","endLine":3,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":116,"column":38,"nodeType":"216","messageId":"217","endLine":116,"endColumn":39,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"215","line":116,"column":71,"nodeType":"216","messageId":"217","endLine":116,"endColumn":72,"suggestions":"222"},{"ruleId":"180","severity":1,"message":"223","line":158,"column":30,"nodeType":"224","endLine":158,"endColumn":93},{"ruleId":"180","severity":1,"message":"225","line":159,"column":32,"nodeType":"224","endLine":159,"endColumn":100},{"ruleId":"180","severity":1,"message":"226","line":30,"column":15,"nodeType":"227","endLine":55,"endColumn":6},{"ruleId":"180","severity":1,"message":"228","line":55,"column":8,"nodeType":"182","endLine":55,"endColumn":20,"suggestions":"229"},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'removeCookie' and 'sizelity_user'. Either include them or remove the dependency array.","ArrayExpression",["232"],"React Hook useEffect has a missing dependency: 'setCookie'. Either include it or remove the dependency array.",["233"],["230"],["231"],"React Hook useCallback has missing dependencies: 'cookies.sizelity_currentSearchData', 'props.location.search', and 'setCookies'. Either include them or remove the dependency array.",["234"],["230"],["231"],"'sname' is assigned a value but never used.","'code' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'request'. Either include it or remove the dependency array.",["235"],"'test' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setCookies'. Either include it or remove the dependency array.",["236"],"'comparePtype' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'alert' and 'userInfo'. Either include them or remove the dependency array.",["237"],"React Hook useEffect has a missing dependency: 'event'. Either include it or remove the dependency array.",["238"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["239"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["240","241"],["242","243"],"'Link' is defined but never used.",["244","245"],["246","247"],"Assignments to the 'gender' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","Assignments to the 'privacy' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'data', 'u.code', and 'u.domain'. Either include them or remove the dependency array.",["248"],"no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"messageId":"265","fix":"266","desc":"267"},{"messageId":"268","fix":"269","desc":"270"},{"messageId":"265","fix":"271","desc":"267"},{"messageId":"268","fix":"272","desc":"270"},{"messageId":"265","fix":"273","desc":"267"},{"messageId":"268","fix":"274","desc":"270"},{"messageId":"265","fix":"275","desc":"267"},{"messageId":"268","fix":"276","desc":"270"},{"desc":"277","fix":"278"},"Update the dependencies array to be: [removeCookie, sizelity_user]",{"range":"279","text":"280"},"Update the dependencies array to be: [setCookie, userInfo]",{"range":"281","text":"282"},"Update the dependencies array to be: [cookies.sizelity_currentSearchData, productData, props.location.search, setCookies]",{"range":"283","text":"284"},"Update the dependencies array to be: [request]",{"range":"285","text":"286"},"Update the dependencies array to be: [setCookies]",{"range":"287","text":"288"},"Update the dependencies array to be: [alert, productData, userInfo]",{"range":"289","text":"290"},"Update the dependencies array to be: [event, myProductData]",{"range":"291","text":"292"},"Update the dependencies array to be: [history, userInfo]",{"range":"293","text":"294"},"removeEscape",{"range":"295","text":"296"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"297","text":"298"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"299","text":"296"},{"range":"300","text":"298"},{"range":"301","text":"296"},{"range":"302","text":"298"},{"range":"303","text":"296"},{"range":"304","text":"298"},"Update the dependencies array to be: [data, productURL, u.code, u.domain]",{"range":"305","text":"306"},[2150,2152],"[removeCookie, sizelity_user]",[2292,2302],"[setCookie, userInfo]",[4236,4249],"[cookies.sizelity_currentSearchData, productData, props.location.search, setCookies]",[4165,4167],"[request]",[3792,3794],"[setCookies]",[10270,10283],"[alert, productData, userInfo]",[1375,1390],"[event, myProductData]",[793,795],"[history, userInfo]",[1247,1248],"",[1247,1247],"\\",[1280,1281],[1280,1280],[4625,4626],[4625,4625],[4658,4659],[4658,4658],[2010,2022],"[data, productURL, u.code, u.domain]"]